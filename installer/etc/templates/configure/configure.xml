<?xml version="1.0" encoding="UTF-8"?> 
<!--
$Id$
-->
<project name="controltier-installer" default="execute" basedir=".">
    <description>
    Build script to configure ControlTier Server and Client. Used by the server-setup.sh script.
    </description>
    <property name="package.ant.version" value="1.7.1p1"/>
    <tstamp />
    <property environment="USER_ENV"/>
    
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ant.home}/lib/ant-contrib-1.0b1.jar"/>
        </classpath>
    </taskdef>

    <property file="${basedir}/properties/config.properties" classpath="." />

    <target name="-load-props" description="Configures default properties and loads the configuration from default.properties">

        <if>
            <or>
                <os family="unix"/>
                <equals arg1="${USER_ENV.OSTYPE}" arg2="cygwin"/>
            </or>
            <then>
                <property name="ctier.root.default" value="${user.home}/ctier"/>
            </then>
            <else>
                <property name="ctier.root.default" value="C:/ctier"/>
            </else>
        </if>

        <!-- import system hostname -->
        <exec executable="hostname" failifexecutionfails="false" outputproperty="system.hostname" failonerror="false"/>
        <if>
            <not>
                <isset property="system.hostname"/>
            </not>
            <then>
                <if>
                    <os family="windows"/>
                    <then>
                        <property name="system.hostname" value="${USER_ENV.COMPUTERNAME}"/>
                    </then>
                    <else>
                        <property name="system.hostname" value="${USER_ENV.HOSTNAME}"/>
                    </else>
                </if>
            </then>
        </if>
        <if>
            <or>
                <not>
                    <isset property="system.hostname"/>
                </not>
                <equals arg1="${system.hostname}" arg2="$${USER_ENV.COMPUTERNAME}"/>
                <equals arg1="${system.hostname}" arg2="$${USER_ENV.HOSTNAME}"/>
            </or>
            <then>
                <fail>ERROR: System hostname could not be determined. Please specify with -Dsystem.hostname=&lt;value&gt; on the commandline.</fail>
            </then>
        </if>
        <!--
        <if>
            <equals arg1="${system.hostname}" arg2="localhost"/>
            <then>
                <echo level="warn">System hostname is "localhost".  Use of this hostname is discouraged.</echo>
            </then>
        </if>
        -->
        <echo>System hostname: ${system.hostname}</echo>


        <if>
            <isset property="is.server.install"/>
            <then>
                <!-- default for server.hostname is system hostname for a server installation -->
                <property name="server.hostname.default" value="${system.hostname}"/>
            </then>
        </if>

        <!-- default for client.hostname is the system hostname -->
        <property name="client.hostname.default" value="${system.hostname}"/>

        <!-- load the defaults.properties file -->
        <property file="${ctier.configfile}"/>

        <if>
            <or>
                <equals arg1="${cygwin}" arg2="true"/>
            </or>
            <then>
                <echo>Node OS Family is 'cygwin'</echo>
                <property name="os.family" value="cygwin"/>
            </then>
            <else>
                <osfamily property="os.family"/>
            </else>
        </if>

        <!-- test whether it is a client install and the server.hostname is unset -->
        <if>
            <and>
                <isset property="is.client.install"/>
                <or>
                    <not>
                        <isset property="server.hostname"/>
                    </not>
                    <equals arg1="${server.hostname}" arg2="$${server.hostname.default}"/>
                </or>
            </and>
            <then>
                <fail>server.hostname is not set. For client installation, set server.hostname in defaults.properties, or on commandline via -Dserver.hostname=&lt;value&gt;</fail>
            </then>
        </if>

        <echo>Using CTIER_ROOT: ${env.ctier_root}</echo>
        <echo>Using server HOSTNAME: ${server.hostname}</echo>
        <echo>Using client HOSTNAME: ${client.hostname}</echo>
        <pathconvert property="env.ctier_root.converted">
            <path path="${env.ctier_root}"/>
        </pathconvert>
        <pathconvert property="env.ctier_root.forwardslash" dirsep="/">
            <path path="${env.ctier_root}"/>
        </pathconvert>
        <pathconvert property="env.ctier_root.escbackslash" dirsep="\\">
            <path path="${env.ctier_root}"/>
        </pathconvert>
        <pathconvert property="env.java_home.escbackslash" dirsep="\\">
            <path path="${USER_ENV.JAVA_HOME}"/>
        </pathconvert>
    </target>

    <target name="-check-prereqs">
        <if>
            <not>
	            <or>
                <!--
                ant.java.version    the JVM version Ant detected
                -->
                  <equals arg1="1.5" arg2="${ant.java.version}"/>
                  <equals arg1="1.6" arg2="${ant.java.version}"/>
                </or>
            </not>
            <then>
                <fail>Unable to install: Java version 1.5/1.6 is required. (ant.java.version = "${ant.java.version}")</fail>
            </then>
            <else>
                <echo>Using compatible Java version: ${ant.java.version}</echo>
            </else>
        </if>
    </target>

<!--    <property name="dontexpand" value="true"/>-->

    <target name="execute" depends="-check-prereqs,-pre-server-install,-load-props,check-client-env,check-server-env,-setup-client,-setup-server,setup-ctlcenter,generate-rcfile,echo-rcfile-info" >
        <echo>
Startup:

On Unix start Jetty by running: "$JETTY_HOME/bin/jetty.sh start"
or on Windows run: "%JETTY_HOME%\bin\start.bat"

Once you have started Jetty, visit this URL to access ControlTier web applications:

    http://${server.hostname}:${server.jetty.port}/

NOTE: ControlTier Client requires that SSH is configured to allow
key-based authentication from the ${server.hostname} host.  Ensure that the
public key has been added to the authorized_keys file.
 </echo>

        <echo>Configuration Complete</echo>
    </target>
    <target name="generate-rcfile">

        <if>
            <equals arg1="${os.family}" arg2="cygwin"/>
            <then>
                <property  name="rcfile.location" value="${USER_ENV.HOMEDRIVE}${USER_ENV.HOMEPATH}/${installer.rcfilename}"/>
                <if>
                    <available file="${rcfile.location}"/>
                    <then>
                        <backup-file-with-datestamp file="${rcfile.location}"/>
                    </then>
                </if>

                <echo file="${rcfile.location}" append="false"># this file was generated by ControlTier installer.

export CTIER_ROOT=${env.ctier_root.escbackslash}

export CTL_HOME=${env.ctl_home.escbackslash}
                    
if [ -z "$CTL_BASE" ] ; then
  export CTL_BASE=${env.ctl_base.escbackslash}
fi
</echo>
                <if>
                    <isset property="task.check-server-env.executed"/>
                    <then>
                        <!-- convert java_home to cygpath style -->
                        
                        <fail unless="env.java_home.escbackslash">Unable to determine cygwin version of JAVA_HOME: ${USER_ENV.JAVA_HOME}</fail>
                        <echo file="${rcfile.location}" append="true">
# Server settings

export JETTY_HOME=${server.jetty.home.escbackslash}
export JETTY_LOGS=${server.jetty.home.escbackslash}/logs
export JETTY_RUN=$JETTY_LOGS
export JAVA_HOME=${env.java_home.escbackslash}
CONFIG_PROPS="-Dctlcenter.config.location=${env.ctier_root.escbackslash}/ctlcenter/ctlcenter-config.properties "
export JAVA_OPTIONS="-XX:MaxPermSize=256m -Xmx1024m -Xms256m $CONFIG_PROPS"

</echo>
                        <property name="rcfile.path" value="$CTL_HOME/bin:$JETTY_HOME/bin:$PATH"/>
                    </then>
                    <else>
                        <property name="rcfile.path" value="$CTL_HOME/bin:$PATH"/>
                    </else>
                </if>
                <echo file="${rcfile.location}" append="true">

export PATH=${rcfile.path}

if [ -n "$BASH" -a -n "$CTL_BASE" ] ; then
    . $CTL_HOME\\etc\\bash_completion.sh ;
    if [ -t 0 -a -z "$CTL_CLI_TERSE" ]
    then
      CTL_CLI_TERSE=true
      export CTL_CLI_TERSE
    fi
fi

                </echo>
            </then>
            <elseif>
            <os family="windows"/>
            <then>
                <if>
                    <isset property="installer.rcbatfilename"/>

                    <then>
                        <property name="rcfile.location" value="${user.home}/${installer.rcbatfilename}"/>
                        <if>
                            <available file="${rcfile.location}"/>
                            <then>
                                <backup-file-with-datestamp file="${rcfile.location}" />
                            </then>
                        </if>
                        <echo file="${rcfile.location}" append="false">:: this file was generated by ControlTier installer.

set CTIER_ROOT=${env.ctier_root.converted}

set CTL_HOME=${env.ctl_home.converted}
set CTL_BASE=${env.ctl_base.converted}
</echo>
                        <if >
                            <isset property="task.check-server-env.executed"/>
                            <then>
                                <echo  file="${rcfile.location}" append="true">
:: Server settings

set JETTY_HOME=${server.jetty.home.converted}
set JETTY_LOGS=${server.jetty.home.converted}\logs
set JETTY_RUN=%JETTY_LOGS%
set CONFIG_PROPS=-Dctlcenter.config.location=${env.ctier_root}\ctlcenter\ctlcenter-config.properties
set JAVA_HOME=${USER_ENV.JAVA_HOME}
set JAVA_OPTIONS=-XX:MaxPermSize=256m -Xmx768m -Xms256m %CONFIG_PROPS%
</echo>
                                <property name="rcfile.path" value="%CTL_HOME%\bin;%JETTY_HOME%\bin;%Path%"/>
                            </then>
                            <else>
                                <property name="rcfile.path" value="%CTL_HOME%\bin;%Path%"/>
                            </else>
                        </if>
                        <echo  file="${rcfile.location}" append="true">

set Path=${rcfile.path}
</echo>
                    </then>
                </if>
            </then>
            </elseif>
            <else>
                <property  name="rcfile.location" value="${user.home}/${installer.rcfilename}"/>
                <if>
                    <available file="${rcfile.location}"/>
                    <then>
                        <backup-file-with-datestamp file="${rcfile.location}" />
                    </then>
                </if>
                <echo>generating rcfile: ${rcfile.location}</echo>

                <echo file="${rcfile.location}" append="false"># this file was generated by ControlTier installer.

export CTIER_ROOT=${env.ctier_root}

export CTL_HOME=${env.ctl_home}

if [ -z "$CTL_BASE" ] ; then
  export CTL_BASE=${env.ctl_base}
fi

</echo>
                <if>
                    <isset property="task.check-server-env.executed"/>
                    <then>
                        <echo file="${rcfile.location}" append="true">
# Server settings

export JETTY_HOME=${server.jetty.home}
export JETTY_LOGS=${server.jetty.home.converted}/logs
export JETTY_RUN=$JETTY_LOGS
export JAVA_HOME=${USER_ENV.JAVA_HOME}
CONFIG_PROPS="-Dctlcenter.config.location=${env.ctier_root}/ctlcenter/ctlcenter-config.properties"
export JAVA_OPTIONS="-XX:MaxPermSize=256m -Xmx1024m -Xms256m $CONFIG_PROPS"
</echo>
                        <property name="rcfile.path" value="$CTL_HOME/bin:$JETTY_HOME/bin:$PATH"/>
                    </then>
                    <else>
                        <property name="rcfile.path" value="$CTL_HOME/bin:$PATH"/>
                    </else>
                </if>
                <echo file="${rcfile.location}" append="true">

export PATH=${rcfile.path}

if [ -n "$BASH" -a -n "$CTL_BASE" ] ; then
    . $CTL_HOME/etc/bash_completion.sh ;
    if [ -t 0 -a -z "$CTL_CLI_TERSE" ]
    then
      CTL_CLI_TERSE=true
      export CTL_CLI_TERSE
    fi
fi
                </echo>
            </else>
        </if>

    </target>

    <target name="-pre-server-install">
        <property name="is.server.install" value="true"/>
    </target>

    <target name="-setup-server" depends="check-server-env,-backup-server-config,setup-itnav,setup-jackrabbit,configure-server,configure-landingpage" >
        <echo>ControlTier Server configured.</echo>
    </target>
    <target name="install-server" depends="-pre-server-install,-check-prereqs,-load-props,-setup-server" >
    </target>

    <target name="-backup-server-config" description="backup config files that would get overwritten">
        <property name="itnav.configpath" value="webapps/itnav/WEB-INF/classes"/>
        <backup-file-with-datestamp file="${server.jetty.base}/${itnav.configpath}/bootstrap.properties"/>
        <backup-file-with-datestamp file="${server.jetty.base}/${itnav.configpath}/runtime.properties"/>
    </target>

    <target name="setup-ctlcenter">
      <echo>Setting ctlcenter jetty.home='${server.jetty.home}'</echo>

        <!--
            expands the ctlcenter package, and executes the build.xml install script with the appropriate properties
        -->
        <fail-if-blank name="env.ctl_home"/>
        <fail-if-blank name="env.ctl_base"/>
        <fail-if-blank name="server.ctlcenter.data_path"/>
        <fail-if-blank name="server.reportservice.port"/>

        <!-- copy in jetty-web.xml -->
        <property name="ctlcenter.jdbc.connection.url"
                  value="jdbc:hsqldb:file:${server.ctlcenter.data_path}/grailsdb"/>
        <property name="ctlcenter.jdbc.connection.username" value="sa"/>
	    <property name="ctlcenter.jdbc.connection.password" value=""/>
        <copy tofile="${server.jetty.base}/ctlcenter/WEB-INF/jetty-web.xml" overwrite="true">
            <filterchain >
                <expandproperties />
            </filterchain>
            <fileset file="${basedir}/etc/templates/ctlcenter/jetty-web.xml.template"/>
        </copy>
        <!-- copy in BirtConfig.properties -->
        <property name="ctlcenter.log.dir" value="${server.jetty.home}/logs"/>
        <copy tofile="${server.jetty.base}/ctlcenter/WEB-INF/classes/BirtConfig.properties" overwrite="true">
            <filterchain >
                <expandproperties />
            </filterchain>
            <fileset file="${basedir}/etc/templates/ctlcenter/BirtConfig.properties.template"/>
        </copy>
	    <pathconvert property="birt.examples.dir" dirsep="/">
            <path path="${server.jetty.base}/ctlcenter/birt-reports/examples"/>
        </pathconvert>


        <echo>Generating ctlcenter configuration ...</echo>
        <backup-file-with-datestamp file="${server.ctlcenter.data_path}/ctlcenter-config.properties"/>
        <echo file="${server.ctlcenter.data_path}/ctlcenter-config.properties">ctl.base=${env.ctl_base.forwardslash}
#loglevel.default is the default log level for jobs: ERR,WARN,INFO,VERBOSE,DEBUG
loglevel.default=WARN

#rss.enabled if set to true enables RSS feeds that are public (non-authenticated)
rss.enabled=true

reportservice.log4j.port=${server.reportservice.port}
reportservice.pagination.default=30
ctlcenter.birt.rptdesign.dir=${birt.examples.dir}
            
dataSource.dbCreate = update
dataSource.url = jdbc:hsqldb:file:${server.ctlcenter.data_path}/grailsdb;shutdown=true
</echo>
    </target>

    <target name="-setup-jetty" description="Expands jetty zip if necessary">
        <!-- change the hardcoded config value(s) in jetty.sh -->
        <backup-file-with-datestamp file="${server.jetty.home}/bin/jetty.sh"/>
        <copy tofile="${server.jetty.home}/bin/jetty.sh" overwrite="true">
            <filterchain>
          <!-- TMP=/tmp -->
                <replaceregex flags="si"
                          pattern="^TMP=(.*)$"
                          replace="TMP=${server.jetty.base}/work"/>
            </filterchain>
	        <fileset file="${server.jetty.home}/bin/jetty.sh.${DSTAMP}-${TSTAMP}.backup"/>
        </copy>
        <chmod file="${server.jetty.home}/bin/jetty.sh" perm="ugo+rx"/>
            <!-- custom start/stop scripts to to ${CTIER_ROOT}/bin -->
        <copy todir="${env.ctier_root}/bin" overwrite="true">
            <filterchain>
              <expandproperties/>
            </filterchain>
            <fileset dir="${basedir}/etc/templates/jetty6"
                     includes="ctier-stop.sh,ctier-start.sh"/>
        </copy>
        <chmod file="${env.ctier_root}/bin/ctier-start.sh" perm="ugo+rx"/>
        <chmod file="${env.ctier_root}/bin/ctier-stop.sh" perm="ugo+rx"/>
    </target>

    <!--
	expand jackrabbit.war into $JETTY_BASE/webapps/jackrabbit
    -->
    <target name="setup-jackrabbit" depends="-setup-jetty">
        <pathconvert property="converted.jackrabbit.repository.config">
            <path path="${server.jetty.base}/webapps/jackrabbit/WEB-INF/repository.xml"/>
        </pathconvert>
        <pathconvert property="converted.jackrabbit.repository.home">
            <path path="${env.ctier_root}/jackrabbit/webdav"/>
        </pathconvert>
        <pathconvert property="converted.jackrabbit.bootstrap.properties">
            <path path="${server.jetty.base}/webapps/jackrabbit/WEB-INF/templates/bootstrap.properties"/>
        </pathconvert>

	    <pathconvert property="converted.jackrabbit.workdir">
            <path path="${server.jetty.base}/work"/>
        </pathconvert>

	      <echo>Doing WebDAV configuration ...</echo>
        <!-- Replace the web.xml -->
        <copy tofile="${server.jetty.base}/webapps/jackrabbit/WEB-INF/web.xml" overwrite="true">
            <filterset>
              <filter token="jackrabbit.repository.config" value="/WEB-INF/templates/bootstrap.properties"/>
              <filter token="jackrabbit.repository.home" value="${converted.jackrabbit.repository.home}"/>
              <filter token="jackrabbit.bootstrap.properties" value="${converted.jackrabbit.bootstrap.properties}"/>
              <filter token="jackrabbit.workdir" value="${converted.jackrabbit.workdir}"/>
            </filterset>
            <fileset file="${basedir}/etc/templates/jackrabbit/web.xml.template"/>
	      </copy>
        <!-- copy in a config.xml that turns off XML processing -->
        <copy tofile="${server.jetty.home}/webapps/jackrabbit/WEB-INF/config.xml" overwrite="true">
            <filterchain>
              <expandproperties/>
            </filterchain>
            <fileset file="${basedir}/etc/templates/jackrabbit/config.xml.template"/>
	      </copy>

	      <if>
            <os family="windows"/>
            <then>
              <pathconvert property="regex-escaped.converted.jackrabbit.repository.config" dirsep="\\">
                <path path="${converted.jackrabbit.repository.config}"/>
              </pathconvert>
            </then>
            <else>
              <property name="regex-escaped.converted.jackrabbit.repository.config"
                        value="${converted.jackrabbit.repository.config}"/>
            </else>
	      </if>
	      <if>
            <os family="windows"/>
            <then>
              <pathconvert property="regex-escaped.converted.jackrabbit.repository.home" dirsep="\\">
                <path path="${converted.jackrabbit.repository.home}"/>
              </pathconvert>
            </then>
            <else>
              <property name="regex-escaped.converted.jackrabbit.repository.home"
                        value="${converted.jackrabbit.repository.home}"/>
            </else>
	      </if>

        <!-- Generate bootstrap.properties -->
        <copy tofile="${converted.jackrabbit.bootstrap.properties}" overwrite="true">
            <filterset>
              <filter token="jackrabbit.repository.config"
                      value="${regex-escaped.converted.jackrabbit.repository.config}"/>
              <filter token="jackrabbit.repository.home"
                      value="${regex-escaped.converted.jackrabbit.repository.home}"/>
              <filter token="jackrabbit.rmi.port"
                      value="${server.jackrabbit.rmi.port}"/>
            </filterset>
            <fileset file="${basedir}/etc/templates/jackrabbit/bootstrap.properties.template"/>
	      </copy>
        <!-- Generate repository.xml -->
        <copy tofile="${converted.jackrabbit.repository.config}" overwrite="true">
            <filterset>
              <filter token="jackrabbit.repository.config"
                      value="${converted.jackrabbit.repository.config}"/>
              <filter token="jackrabbit.repository.home"
                      value="${converted.jackrabbit.repository.home}"/>
              <filter token="jackrabbit.bootstrap.properties" value="${converted.jackrabbit.bootstrap.properties}"/>
            </filterset>
            <fileset file="${basedir}/etc/templates/jackrabbit/repository.xml.template"/>
	      </copy>

    </target>


    <target name="setup-itnav" depends="-setup-jetty">
        <!--
        update web.xml
        -->
      <echo>Doing workbench configuration...</echo>

    </target>

    <target name="-prepare-configure-server">
        <if>
            <and>
                <isset property="env.ctl_base"/>
                <not>
                    <equals arg1="" arg2="env.ctl_base"/>
                </not>
            </and>
            <then>
                <property name="ctl.integration.enabled" value="true"/>
            </then>
            <else>
                <property name="ctl.integration.enabled" value="false"/>
            </else>
        </if>
    </target>

     <target name="configure-landingpage" depends="configure-server"
             description="Rewrite the landing page with correct install info">
        <!-- expand the properties in the landing page -->
        <copy tofile="${server.jetty.base}/controltier/index.html" overwrite="true">
            <filterchain>
                <expandproperties/>
            </filterchain>
            <fileset file="${basedir}/etc/templates/web/index.html.template"/>
        </copy>
    </target>


    <target name="configure-server" depends="-prepare-configure-server">

        <!-- update server port -->
        <!-- duplicate original -->
        <backup-file-with-datestamp file="${server.jetty.base}/etc/jetty.xml"/>

        <!-- overwrite file -->
        <copy tofile="${server.jetty.base}/etc/jetty.xml" overwrite="true" filtering="true" verbose="true">
            <filterset >
                <filter token="jetty.server.port" value="${server.jetty.port}"/>
                <filter token="jetty.server.httpsPort" value="${server.jetty.httpsPort}"/>
            </filterset>
            <fileset file="${basedir}/etc/templates/jetty6/jetty.xml.template"/>
        </copy>

        <!-- configure webdefault.xml used by all CTier web app -->
        <!-- duplicate original -->
        <backup-file-with-datestamp file="${server.jetty.base}/etc/webdefault.xml"/>
        <!-- overwrite file -->
        <copy tofile="${server.jetty.base}/etc/webdefault.xml" overwrite="true" filtering="true" verbose="true">
            <fileset file="${basedir}/etc/templates/jetty6/webdefault.xml.template"/>
        </copy>

        <!-- copy windows start script -->
        <copy tofile="${server.jetty.base}/bin/start.bat" overwrite="true">
            <fileset file="${basedir}/etc/templates/jetty6/start.bat.template"/>
        </copy>
        <!-- create windows service wrapper file -->
        <copy tofile="${server.jetty.base}/bin/jetty-ctier-service.conf" overwrite="true" filtering="true" verbose="true">
            <filterchain >
                <expandproperties/>
            </filterchain>
            <fileset file="${basedir}/etc/templates/jetty6/jetty-ctier-service.conf.template"/>
        </copy>

        <!-- modify the bootstrap.properties to include the correct rdfdata path -->

        <property name="itnav.configpath" value="webapps/itnav/WEB-INF/classes"/>

        <!-- duplicate original -->
        <backup-file-with-datestamp file="${server.jetty.base}/${itnav.configpath}/bootstrap.properties"/>

        <!-- overwrite file -->
        <copy tofile="${server.jetty.base}/${itnav.configpath}/bootstrap.properties" overwrite="true">
            <filterchain >
                <!-- ngps.workbench.backend.type = fs    -->
                <replaceregex flags="si"
                    pattern="^ngps\.workbench\.backend\.type *=(.*)$"
                    replace="ngps.workbench.backend.type = fs"/>
                <!-- ngps.workbench.backend.fs.base = /usr/local/jetty/rdfdata -->
                <replaceregex flags="si"
                    pattern="^ngps\.workbench\.backend\.fs\.base *=(.*)$"
                    replace="ngps.workbench.backend.fs.base = ${regex-escaped.server.rdfdata.path}" />
            </filterchain>
            <fileset file="${server.jetty.base}/${itnav.configpath}/bootstrap.properties.${DSTAMP}-${TSTAMP}.backup"/>
        </copy>
        <if>
            <equals arg1="true" arg2="${project.default.create}"/>
            <then>
                <property name="app.project.default.name" value="${project.default.name}"/>
                <property name="app.project.default.description" value="${project.default.description}"/>
                <property name="app.project.default.organization" value="${project.default.organization}"/>
            </then>
            <else>
                <property name="app.project.default.name" value=""/>
                <property name="app.project.default.description" value=""/>
                <property name="app.project.default.organization" value=""/>
            </else>
        </if>

        <!-- modify the runtime.properties to include the correct settings -->

        <!-- duplicate original -->
        <backup-file-with-datestamp file="${server.jetty.base}/${itnav.configpath}/runtime.properties"/>
        <!-- overwrite file -->
        <copy tofile="${server.jetty.base}/${itnav.configpath}/runtime.properties" overwrite="true">
            <filterchain>
               <replaceregex flags="si"
                    pattern="^app\.project\.default\.name *=(.*)$"
                    replace="app.project.default.name = ${app.project.default.name}"/>
               <replaceregex flags="si"
                    pattern="^app\.project\.default\.description *=(.*)$"
                    replace="app.project.default.description = ${app.project.default.description}"/>
               <replaceregex flags="si"
                    pattern="^app\.project\.default\.organization *=(.*)$"
                    replace="app.project.default.organization = ${app.project.default.organization}"/>
                <replaceregex flags="si"
                    pattern="^app\.external\.uri *=(.*)$"
                    replace="app.external.uri = http://${server.hostname}:${server.jetty.port}"/>
                <replaceregex flags="si"
                    pattern="^dav\.baseUrl *=(.*)$"
                    replace="dav.baseUrl = http://${server.hostname}:${server.jetty.port}/${server.jetty.webdav.path}"/>
                <replaceregex flags="si"
                              pattern="^app\.ctlcenter\.baseUrl *=(.*)$"
                              replace="app.ctlcenter.baseUrl = ${ctlcenter.baseUrl}"/>

                <replaceregex flags="si"
                    pattern="^order\.package\.defaults\.packageRepoURL\.template *=(.*?)/pkgs(.*)$"
                    replace="order.package.defaults.packageRepoURL.template=http://${server.hostname}:${server.jetty.port}/${server.jetty.webdav.path}/pkgs\2"/>

                <replaceregex flags="si"
                    pattern="^dav\.user *=(.*)$"
                    replace="dav.user = ${jetty.user.name}"
                    />
                <replaceregex flags="si"
                    pattern="^dav\.passwd *=(.*)$"
                    replace="dav.passwd = ${jetty.user.password}"
                    />
                <replaceregex flags="si"
                    pattern="^dav\.baseDir *=(.*)$"
                    replace="dav.baseDir = ${regex-escaped.server.dav.path}"
                    />
                <replaceregex flags="si"
                    pattern="^framework\.node *=(.*)$"
                    replace="framework.node = ${client.node.name}"
                    />
		        <replaceregex flags="si"
                    pattern="^framework\.node\.hostname *=(.*)$"
                    replace="framework.node.hostname = ${client.hostname}"
                    />
                <!-- node object name -->
                <replaceregex flags="si"
                             pattern="^framework\.node\.name *=(.*)$"
                    replace="framework.node.name = ${client.node.name}"
                    />
	            <!-- node object type -->
                <replaceregex flags="si"
                             pattern="^framework\.node\.type *=(.*)$"
                    replace="framework.node.type = ${framework.node.type}"
                    />
                <replaceregex flags="si"
                              pattern="^app\.log4j\.appender\.CommonLog\.port *=(.*)$"
                              replace="app.log4j.appender.CommonLog.port = ${server.reportservice.port}"
                    />
                <replaceregex flags="si"
                              pattern="^ctl\.base *=(.*)$"
                              replace="ctl.base = ${env.ctl_base.forwardslash}"
                    />
                <replaceregex flags="si"
                              pattern="^ctl\.integration\.enabled *=(.*)$"
                              replace="ctl.integration.enabled = ${ctl.integration.enabled}"
                    />
                <replaceregex flags="si"
                              pattern="^app\.reportservice\.host *=(.*)$"
                              replace="app.reportservice.host = ${server.hostname}"
                    />
                <replaceregex flags="si"
                              pattern="^app\.reportservice\.port *=(.*)$"
                              replace="app.reportservice.port = ${server.reportservice.port}"
                    />

                <!-- Backwards compat for 3.4.x: replace "app.reportcenter.*" with "app.reportservice.*" -->
                <replaceregex flags="si"
                              pattern="^app\.reportcenter\.host *=(.*)$"
                              replace="app.reportservice.host = ${server.hostname}"
                    />
                <replaceregex flags="si"
                              pattern="^app\.reportcenter\.port *=(.*)$"
                              replace="app.reportservice.port = ${server.reportservice.port}"
                    />
                <!-- end 3.4.x compat -->
                <replaceregex flags="si"
                              pattern="^app\.uploads\.localpath *=(.*)$"
                              replace="app.uploads.localpath = ${env.ctier_root.forwardslash}/workbench/incoming"
                    />
            </filterchain>
            <fileset file="${server.jetty.base}/${itnav.configpath}/runtime.properties.${DSTAMP}-${TSTAMP}.backup"/>
        </copy>


        <!-- modify the log4j.properties to include the correct settings -->
        <pathconvert property="converted.workbench.log">
          <path path="${server.jetty.base}/logs/workbench.log"/>
        </pathconvert>

        <!-- duplicate original -->
        <backup-file-with-datestamp file="${server.jetty.base}/${itnav.configpath}/log4j.properties"/>
        <!-- overwrite file -->
        <copy tofile="${server.jetty.base}/${itnav.configpath}/log4j.properties" overwrite="true">
            <filterchain>
               <replaceregex flags="si"
                    pattern="^log4j\.appender\.R\.file *=(.*)$"
                    replace="log4j.appender.R.file = ${converted.workbench.log}"/>

            </filterchain>
            <fileset file="${server.jetty.base}/${itnav.configpath}/log4j.properties.${DSTAMP}-${TSTAMP}.backup"/>
        </copy>


        <!-- load properties and determine whether user is present and valid-->
        <property file="${server.jetty.base}/etc/realm.properties" prefix="realm"/>
        <propertycopy property="realm.user.name" from="realm.${jetty.user.name}" silent="true"/>
        <propertyregex property="realm.user.roles" input="${realm.user.name}"
                   regexp="${jetty.user.password},(.*)"
                   select="\1" />
        <if>
            <or>
                <not>
                    <isset property="realm.user.roles"/>
                </not>

                <and>
                    <isset property="realm.user.roles"/>
                    <not>
                        <and>
                            <contains string="${realm.user.roles}" substring="user"/>
                            <contains string="${realm.user.roles}" substring="admin"/>
                        </and>
                    </not>
                </and>
            </or>
            <then>
                <if>
                    <equals arg1="true" arg2="${users.install-default}"/>
                    <then>
                        <backup-file-with-datestamp file="${server.jetty.base}/etc/realm.properties"/>

                        <copy tofile="${server.jetty.base}/etc/realm.properties" overwrite="true">
                            <filterset>
                                <filter token="jetty.user.name" value="${jetty.user.name}"/>
                                <filter token="jetty.user.password" value="${jetty.user.password}"/>
				<!-- deploy user -->
				<filter token="jetty.user.deploy.name" value="${jetty.user.deploy.name}"/>
                                <filter token="jetty.user.deploy.password" value="${jetty.user.deploy.password}"/>
				<!-- build user -->
				<filter token="jetty.user.build.name" value="${jetty.user.build.name}"/>
                                <filter token="jetty.user.build.password" value="${jetty.user.build.password}"/>
                            </filterset>
                            <fileset file="${basedir}/etc/templates/jetty6/realm.properties.template"/>
                        </copy>
                    </then>
                </if>
            </then>
        </if>
    </target>

    <target name="-pre-client-install">
        <property name="is.client.install" value="true"/>
    </target>
    <target name="-setup-client" depends="check-client-env,configure-client" description="Internal client install target" >
        <echo>ControlTier Client configured.</echo>
    </target>

    <target name="setup-client" depends="-pre-client-install,-check-prereqs,-load-props,-setup-client,generate-rcfile,echo-rcfile-info" description="Installs the ControlTier client only">
        <echo>Configuration Complete</echo>
    </target>

    <target name="echo-rcfile-info" description="Prints information about location and content of .ctierrc file.">
        <if>

            <or>
                <os family="unix"/>
                <equals arg1="${os.family}" arg2="cygwin"/>
            </or>
            <then>
                <property name="rcpath" value="${rcfile.location}"/>
                <pathconvert property="rcpath.converted">
                    <path path="${rcpath}"/>
                </pathconvert>
<echo>
A .ctierrc file was generated at:
    ${rcpath.converted}
containing the appropriate environment variables for the installed
ControlTier Client To use it, add the following to your .profile
or equivalent:

    if [ -f ${rcfile.location} ]; then
    . ${rcfile.location}
    else
    echo ${rcfile.location} not found 1&gt;&amp;2
    fi
</echo>
            </then>
            <else>

<echo>
A ctier.bat file was generated at:
   ${rcfile.location}

It defines necessary environment variables and should be executed
prior to starting up the jetty server.
</echo>
            </else>
        </if>
    </target>

    <macrodef name="backup-file-with-datestamp">
        <attribute name="file"/>
        <sequential >
            <if>
                <available file="@{file}"/>
                <then>
                    <copy tofile="@{file}.${DSTAMP}-${TSTAMP}.backup" overwrite="true">
                        <fileset file="@{file}"/>
                    </copy>
                </then>
            </if>
        </sequential>
    </macrodef>

    <target name="configure-client">
        <!--
        set executable flag on bin scripts
                -->


        <if>
            <not>
                <available file="${env.ctl_base}" type="dir"/>
            </not>
            <then>
                <fail>CTL_BASE does not exist: ${env.ctl_base}</fail>
            </then>
        </if>

        <pathconvert property="converted.env.ctl_home">
            <path path="${env.ctl_home}"/>
        </pathconvert>
        <pathconvert property="converted.env.ctl_base">
            <path path="${env.ctl_base}"/>
        </pathconvert>

        <!-- run "$CTL_HOME/bin/ctl-setup -n hostname" -->
        <if>
            <os family="unix"/>
            <then>
                <dirname property="anthome.dir" file="${ant.home}"/>
                <basename property="anthome.base" file="${ant.home}"/>

                <exec executable="${converted.env.ctl_home}/bin/ctl-setup" dir="${converted.env.ctl_base}" newenvironment="true" failonerror="true">
                    <env key="CTL_HOME" value="${converted.env.ctl_home}"/>
                    <env key="CTL_BASE" value="${converted.env.ctl_base}"/>
                    <env key="ANT_HOME" value="${anthome.dir}/${anthome.base}"/>
                    <env key="JAVA_HOME" value="${USER_ENV.JAVA_HOME}"/>
                    <arg line="-f -n ${client.node.name} -N ${client.hostname} -s ${server.hostname} --server.port=${server.jetty.port} --project.default.name=${project.default.name} --project.default.create=${project.default.create}"/>
                </exec>
		    </then>
            <elseif>
                <os family="windows"/>
                <then>

                    <exec executable="${converted.env.ctl_home}\bin\ctl-setup.bat" dir="${converted.env.ctl_base}" newenvironment="true" failonerror="true">
                        <env key="CTL_HOME" value="${converted.env.ctl_home}"/>
                        <env key="CTL_BASE" value="${converted.env.ctl_base}"/>
<!--                        <env key="ANT_HOME" value="${ant.home}"/>-->
                        <env key="JAVA_HOME" value="${USER_ENV.JAVA_HOME}"/>
                        <arg line="-f -n ${client.hostname} -N ${client.hostname}  -s ${server.hostname} --server.port=${server.jetty.port} --project.default.name=${project.default.name} --project.default.create=${project.default.create}"/>
                    </exec>
                
                </then>
            </elseif>
            <else>
                <fail>Sorry, the installer does not currently support your operating system.</fail>
            </else>
        </if>


        <property name="framework.dav.rootDir" value="${server.jetty.base}/webapps/${server.jetty.webdav.path}"/>
        <pathconvert property="converted.framework.dav.rootDir">
            <path path="${framework.dav.rootDir}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.framework.dav.rootDir" dirsep="\\\\\\\\">
                    <!--
                    NOTE: we need eight \ chars "\\\\\\\\" here because:
                    It is unescaped once by ant (or pathconvert?) into \\\\, once by replaceregex into \\.
                    The output into properties file should be \\, since it is then unescaped by java props when read back in.
                    barf..
                -->
                    <path path="${framework.dav.rootDir}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.framework.dav.rootDir" value="${converted.framework.dav.rootDir}"/>
            </else>
        </if>
        <property name="framework.pkgRepo.rootdir" value="${server.jetty.base}/webapps/${server.jetty.webdav.path}/pkgs"/>
        <pathconvert property="converted.framework.pkgRepo.rootdir">
            <path path="${framework.pkgRepo.rootdir}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.framework.pkgRepo.rootdir" dirsep="\\\\\\\\">
                    <path path="${framework.pkgRepo.rootdir}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.framework.pkgRepo.rootdir" value="${converted.framework.pkgRepo.rootdir}"/>
            </else>
        </if>
        <property name="ant.home.full" value="${env.ctl_home}/pkgs/apache-ant-${package.ant.version}"/>
        <pathconvert property="converted.ant.home.full">
            <path path="${ant.home.full}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.ant.home.full" dirsep="\\\\\\\\">
                    <path path="${ant.home.full}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.ant.home.full" value="${converted.ant.home.full}"/>
            </else>
        </if>

        <pathconvert property="converted.framework.ssh.keypath">
            <path path="${framework.ssh.keypath}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.framework.ssh.keypath" dirsep="\\\\\\\\">
                    <path path="${framework.ssh.keypath}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.framework.ssh.keypath" value="${converted.framework.ssh.keypath}"/>
            </else>
        </if>

        <!-- duplicate original -->
        <backup-file-with-datestamp file="${env.ctl_base}/etc/framework.properties"/>

        <!-- overwrite file -->
        <copy tofile="${env.ctl_base}/etc/framework.properties" overwrite="true">
            <filterchain>
                <replaceregex flags="si"
                   pattern="^ant\.home *=(.*)$"
                   replace="ant.home = ${regex-escaped.ant.home.full}"
                />
                <!--
framework.workbench.integration.enabled = true
framework.dav.rootDir =
framework.server.username = user2
framework.server.password = user2pass
framework.server.hostname = localhost
framework.server.url = http://localhost:8080/itnav

framework.webdav.uri = http://localhost:8080/jackrabbit/repository/workbench
framework.webdav.username = user2
framework.webdav.password = user2pass

framework.pkgRepo.uri = http://localhost:8080/jackrabbit/repository/workbench/pkgs
framework.pkgRepo.rootdir =
framework.pkgRepo.upload-url = http://localhost:8080/jackrabbit/repository/workbench/pkgs

framework.moduleRepo.url = http://localhost:8080/jackrabbit/repository/workbench/publish/modules

framework.ctlcenter.url = http://localhost:8080/ctlcenter

 -->

                <replaceregex flags="si"
                    pattern="^framework\.workbench\.integration\.enabled *=(.*)$"
                    replace="framework.workbench.integration.enabled = true"
                />
                <replaceregex flags="si"
                    pattern="^framework\.dav\.rootDir *=(.*)$"
                    replace="framework.dav.rootDir = ${regex-escaped.framework.dav.rootDir}"
                />
                <replaceregex flags="si"
                    pattern="^framework\.server\.username *=(.*)$"
                    replace="framework.server.username = ${jetty.user.name}"/>
                <replaceregex flags="si"
                    pattern="^framework\.server\.password *=(.*)$"
                    replace="framework.server.password = ${jetty.user.password}"/>
                <replaceregex flags="si"
                    pattern="^framework\.server\.hostname *=(.*)$"
                    replace="framework.server.hostname = ${server.hostname}"/>
                <replaceregex flags="si"
                    pattern="^framework\.server\.url *=(.*)$"
                    replace="framework.server.url = http://${server.hostname}:${server.jetty.port}/itnav"/>
                <replaceregex flags="si"
                    pattern="^framework\.webdav\.uri *=(.*)$"
                    replace="framework.webdav.uri = http://${server.hostname}:${server.jetty.port}/${server.jetty.webdav.path}"/>
                <replaceregex flags="si"
                    pattern="^framework\.webdav\.username *=(.*)$"
                    replace="framework.webdav.username = ${jetty.user.name}"/>
                <replaceregex flags="si"
                    pattern="^framework\.webdav\.password *=(.*)$"
                    replace="framework.webdav.password = ${jetty.user.password}"/>
                <replaceregex flags="si"
                    pattern="^framework\.webdav\.rootdir *=(.*)$"
                    replace="framework.webdav.rootdir = ${regex-escaped.framework.dav.rootDir}"/>
                <replaceregex flags="si"
                    pattern="^framework\.pkgRepo\.uri *=(.*)$"
                    replace="framework.pkgRepo.uri = http://${server.hostname}:${server.jetty.port}/${server.jetty.webdav.path}/pkgs"/>
                <replaceregex flags="si"
                    pattern="^framework\.pkgRepo\.rootdir *=(.*)$"
                    replace="framework.pkgRepo.rootdir = ${regex-escaped.framework.pkgRepo.rootdir}"/>
                <replaceregex flags="si"
                    pattern="^framework\.pkgRepo\.upload-url *=(.*)$"
                    replace="framework.pkgRepo.upload-url = http://${server.hostname}:${server.jetty.port}/${server.jetty.webdav.path}/pkgs"/>
               <replaceregex flags="si"
                    pattern="^framework\.moduleRepo\.url *=(.*)$"
                    replace="framework.moduleRepo.url = http://${server.hostname}:${server.jetty.port}/${server.jetty.webdav.path}/publish/modules"/>				
               <replaceregex flags="si"
                    pattern="^framework\.ctlcenter\.url *=(.*)$"
                    replace="framework.ctlcenter.url = http://${server.hostname}:${server.jetty.port}/ctlcenter"/>

                <!-- email properties -->
                <!--
# recipient addresses to send email (comma separated)
framework.email.tolist = root

# email address appearing in message "from" field
framework.email.from = root

# email address replies should go
framework.email.replyto = do-not-reply

# The ctl email relay host. must be a functioning smtp relay server
framework.email.mailhost = mail
framework.email.mailport = 25

# User/pass info if the smtp server requires it
framework.email.user =
framework.email.password =
framework.email.ssl = true

# Fail if there is an error
framework.email.failonerror = true
                -->
                <replaceregex flags="si"
                              pattern="^framework\.email\.tolist *=(.*)$"
                              replace="framework.email.tolist = ${framework.email.tolist}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.from *=(.*)$"
                              replace="framework.email.from = ${framework.email.from}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.replyto *=(.*)$"
                              replace="framework.email.replyto = ${framework.email.replyto}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.mailhost *=(.*)$"
                              replace="framework.email.mailhost = ${framework.email.mailhost}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.mailport *=(.*)$"
                              replace="framework.email.mailport = ${framework.email.mailport}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.user *=(.*)$"
                              replace="framework.email.user = ${framework.email.user}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.password *=(.*)$"
                              replace="framework.email.password = ${framework.email.password}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.ssl *=(.*)$"
                              replace="framework.email.ssl = ${framework.email.ssl}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.failonerror *=(.*)$"
                              replace="framework.email.failonerror = ${framework.email.failonerror}"/>

                <!-- ssh path -->
                <replaceregex flags="si"
                              pattern="^framework\.ssh\.keypath *=(.*)$"
                              replace="framework.ssh.keypath = ${regex-escaped.framework.ssh.keypath}"/>
                
                <!-- ssh user -->
                <replaceregex flags="si"
                              pattern="^framework\.ssh\.user *=(.*)$"
                              replace="framework.ssh.user = ${framework.ssh.user}"/>

               <!-- node object name --> 
               <replaceregex flags="si" 
                             pattern="^framework\.node\.name *=(.*)$" 
                    replace="framework.node.name = ${client.node.name}" 
               /> 
	       <!-- node object type --> 
               <replaceregex flags="si" 
                             pattern="^framework\.node\.type *=(.*)$" 
                    replace="framework.node.type = ${framework.node.type}" 
               /> 
	       	       
	       <!-- node authentication strategy -->
	       <replaceregex flags="si" 
                             pattern="^framework\.nodeauthentication\.classname *=(.*)$" 
			     replace="framework.nodeauthentication.classname = ${client.nodeauthentication.classname}" 
               /> 

            </filterchain>
            <fileset file="${env.ctl_base}/etc/framework.properties.${DSTAMP}-${TSTAMP}.backup"/>
        </copy>


      <!-- duplicate original -->
        <backup-file-with-datestamp file="${env.ctl_base}/etc/project.properties"/>

        <!-- overwrite file -->
        <copy tofile="${env.ctl_base}/etc/project.properties" overwrite="true">
            <filterchain>
                <replaceregex flags="si"
                   pattern="^project\.default\.name *=(.*)$"
                   replace="project.default.name = ${project.default.name}"
                />
            <replaceregex flags="si"
                   pattern="^project\.default\.create *=(.*)$"
                   replace="project.default.create = ${project.default.create}"
                />
                <!--
project.default.name = default
project.default.create = true
 -->
	        </filterchain>
            <fileset file="${env.ctl_base}/etc/project.properties.${DSTAMP}-${TSTAMP}.backup"/>
	    </copy>


        <!-- duplicate original -->
        <backup-file-with-datestamp file="${env.ctl_base}/etc/node.properties"/>

        <!-- overwrite file -->
        <copy tofile="${env.ctl_base}/etc/node.properties" overwrite="true">
            <filterchain>
                <replaceregex flags="si"
                             pattern="^.node\.name *=(.*)$" 
                    replace="node.name = ${client.node.name}" 
                />
	            <replaceregex flags="si"
                             pattern="^.node\.hostname *=(.*)$" 
			     replace="node.hostname = ${client.node.hostname}" 
		        />
	            <replaceregex flags="si"
			     pattern="^.node\.description *=(.*)$" 
			     replace="node.description = ${client.node.description}" 
                />
	        </filterchain>
            <fileset file="${env.ctl_base}/etc/node.properties.${DSTAMP}-${TSTAMP}.backup"/>
	    </copy>

        <!-- duplicate original log4j.properties -->
        <backup-file-with-datestamp file="${env.ctl_base}/etc/log4j.properties"/>

        <!-- overwrite file -->
        <copy tofile="${env.ctl_base}/etc/log4j.properties" overwrite="true">
            <filterchain>
                <!--
log4j.logger.com.controltier.log.common=INFO,CommonLog
log4j.appender.CommonLog.remoteHost=${server.hostname}
log4j.appender.CommonLog.port=${server.reportservice.port}
log4j.appender.R.file=/tmp/workbench.log

 -->
                <replaceregex flags="si"
                              pattern="^# *log4j\.logger\.com\.controltier\.log\.common *=(.*)$"
                              replace="log4j.logger.com.controltier.log.common = INFO,CommonLog"/>
                <replaceregex flags="si"
                              pattern="^log4j\.appender\.CommonLog\.remoteHost *=(.*)$"
                              replace="log4j.appender.CommonLog.remoteHost = ${server.hostname}"/>
                <replaceregex flags="si"
                              pattern="^log4j\.appender\.CommonLog\.port *=(.*)$"
                              replace="log4j.appender.CommonLog.port = ${server.reportservice.port}"/>

               <replaceregex flags="si"
                              pattern="^log4j\.appender\.R\.file *=(.*)$"
                              replace="log4j.appender.R.file = ${converted.workbench.log}"/>

            </filterchain>
            <fileset file="${env.ctl_base}/etc/log4j.properties.${DSTAMP}-${TSTAMP}.backup"/>
        </copy>

    </target>


    <macrodef name="fail-if-blank">
        <attribute name="name" />
        <sequential >
            <fail unless="@{name}">@{name} is not defined in default.properties</fail>
            <condition property="@{name}.isblank">
                <equals arg1="" arg2="${@{name}}"/>
            </condition>
            <fail if="@{name}.isblank">@{name} is empty in default.properties</fail>
        </sequential>
    </macrodef>
    
    <macrodef name="fail-if-not-dir">
        <attribute name="name" />
        <attribute name="mesg" default=""/>
        <sequential >
            <condition property="@{name}.isnotdir">
                <not>
                    <available file="${@{name}}" type="dir"/>
                </not>
            </condition>
            <fail if="@{name}.isnotdir">@{name} is not a valid directory: '${@{name}}'@{mesg}</fail>
        </sequential>
    </macrodef>


    <target name="check-client-env">

        <!--
        target: check-client-env
        check environment properties set by input properties
        -->

        <!-- default property values -->
        <property name="server.reportservice.port" value="1055"/>
        <property name="framework.email.tolist" value="root"/>
        <property name="framework.email.from" value="root"/>
        <property name="framework.email.replyto" value="do-not-reply"/>
        <property name="framework.email.mailhost" value="mail"/>
        <property name="framework.email.mailport" value="25"/>
        <property name="framework.email.ssl" value="true"/>
        <property name="framework.email.failonerror" value="true"/>
        <property name="framework.ssh.keypath" value="${user.home}/.ssh/id_dsa"/>
        <property name="framework.ssh.user" value="${user.name}"/>

        <!-- verify values to be non-empty -->
        <fail-if-blank name="env.ctl_home"/>
        <fail-if-blank name="env.ctl_base"/>
        <fail-if-blank name="client.hostname"/>
        <fail-if-blank name="server.jetty.port"/>
        <fail-if-blank name="server.hostname"/>
        <fail-if-blank name="server.jetty.webdav.path"/>
        <fail-if-blank name="jetty.user.name"/>
        <fail-if-blank name="jetty.user.password"/>

        <fail-if-blank name="server.reportservice.port"/>
        <fail-if-blank name="framework.ssh.user"/>
        <fail-if-blank name="framework.ssh.keypath"/>


        <pathconvert property="env.ctl_home.converted">
            <path path="${env.ctl_home}"/>
        </pathconvert>
        <pathconvert property="env.ctl_base.converted">
            <path path="${env.ctl_base}"/>
        </pathconvert>
        <pathconvert property="env.ctl_base.forwardslash" dirsep="/">
            <path path="${env.ctl_base}"/>
        </pathconvert>

        <pathconvert property="env.ctl_home.escbackslash" dirsep="\\">
            <path path="${env.ctl_home}"/>
        </pathconvert>
        <pathconvert property="env.ctl_base.escbackslash" dirsep="\\">
            <path path="${env.ctl_base}"/>
        </pathconvert>
    <!--
	    Check if JRE_HOME is set
	-->
	<if>
	  <and>
	    <isset property="USER_ENV.JRE_HOME"/>
	    <not>
	      <equals arg1="${USER_ENV.JRE_HOME}" arg2="${USER_ENV.JAVA_HOME}"/>
	    </not>
	  </and>
	  <then>
	    <echo level="warn">---------------------------------------------------------</echo>
	    <echo level="warn">Warning: JRE_HOME is set and differs from JAVA_HOME: </echo>
	    <echo level="warn"></echo>
	    <echo level="warn">     JAVA_HOME='${USER_ENV.JAVA_HOME}' </echo>
	    <echo level="warn">     JRE_HOME='${USER_ENV.JRE_HOME}' </echo>
	    <echo level="warn"></echo>
	    <echo level="warn">This sofware requires a JDK environment.</echo>
	    <echo level="warn">Consider unsetting JRE_HOME or set JRE_HOME=JAVA_HOME</echo>
	    <echo level="warn">---------------------------------------------------------</echo>
	  </then>
	</if>
    </target>

    <target name="check-server-env">

        <if>
            <equals arg1="${os.family}" arg2="cygwin"/>
            <then>
                <fail>Server installation is not supported on cygwin.  Use the --client flag to install the client only.</fail>
            </then>
        </if>
        <!--
        target: check-server-env
        check environment properties set by input properties
        -->

        <fail-if-blank name="server.jetty.base"/>
        <fail-if-blank name="server.jetty.home"/>
        <if>
            <not>
                <and>
                    <isset property="pkgs.jetty.version"/>
                    <not>
                        <equals arg1="" arg2="${pkgs.jetty.version}"/>
                    </not>
                </and>
            </not>
            <then>
                <fail-if-not-dir  name="server.jetty.home" mesg=", server.jetty.home should be a valid Jetty installation"/>
                <fail-if-not-dir  name="server.jetty.base" mesg=", server.jetty.base should be a valid Jetty base"/>
            </then>
            <else>
                <if>
                    <not>
                        <equals arg1="${server.jetty.home}" arg2="${server.jetty.base}"/>
                    </not>
                    <then>
                        <fail>server.jetty.home and server.jetty.base must be the same for automatic Jetty installation.</fail>
                    </then>
                </if>
            </else>
        </if>

        <pathconvert property="server.jetty.home.converted">
            <path path="${server.jetty.home}"/>
        </pathconvert>

        <pathconvert property="server.jetty.base.converted">
            <path path="${server.jetty.base}"/>
        </pathconvert>

        <pathconvert property="server.jetty.home.escbackslash" dirsep="\\">
            <path path="${server.jetty.home}"/>
        </pathconvert>

        <pathconvert property="server.jetty.base.escbackslash" dirsep="\\">
            <path path="${server.jetty.base}"/>
        </pathconvert>

        <fail-if-blank name="server.jetty.port"/>
        <fail-if-blank name="server.hostname"/>
        <fail-if-blank name="server.jetty.webdav.path"/>
        <fail-if-blank name="jetty.user.name"/>
        <fail-if-blank name="jetty.user.password"/>

        <!-- check realm.properties file if the users.install-default property is not "true" -->
        <if>
            <not>
                <equals arg1="true" arg2="${users.install-default}"/>
            </not>
            <then>
                <if>
                    <not>
                        <available file="${server.jetty.base}/etc/realm.properties"/>
                    </not>
                    <then>
                        <fail>The realm.properties file was not found: ${server.jetty.base}/etc/realm.properties
 To have a default realm.properties file used, please set the "users.install-default" property to "true" inside "default.properties".</fail>
                    </then>
                </if>
            </then>
        </if>

        <fail-if-blank name="server.dav.basedir"/>

        <pathconvert property="converted.server.dav.basedir">
            <path path="${server.dav.basedir}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.server.dav.path" dirsep="\\\\\\\\">
                    <path path="${server.dav.basedir}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.server.dav.path" value="${converted.server.dav.basedir}"/>
            </else>
        </if>

        <fail-if-blank name="server.rdfdata.path"/>
        <pathconvert property="converted.server.rdfdata.path">
            <path path="${server.rdfdata.path}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.server.rdfdata.path" dirsep="\\\\\\\\">
                    <path path="${server.rdfdata.path}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.server.rdfdata.path" value="${converted.server.rdfdata.path}"/>
            </else>
        </if>

        <fail-if-blank name="server.ctlcenter.base_path"/>

        <pathconvert property="converted.server.ctlcenter.base_path">
            <path path="${server.ctlcenter.base_path}"/>
        </pathconvert>

        <fail-if-blank name="server.ctlcenter.data_path"/>
        <fail-if-blank name="server.jetty.port"/>
	<!--
	** 
	** Configure the URL values used to switch between applications.
	** If they are all running in a common container (the assumption),
	** then no prefix is used.
	**
	-->
	<if>
	  <equals arg1="http://${server.ctlcenter.host}:${server.ctlcenter.jetty.port}"
		  arg2="http://${server.hostname}:${server.jetty.port}"/>
	  <then>
	    <property name="ctlcenter.baseUrl" value="/ctlcenter"/>
	  </then>
	  <else>
	    <property name="ctlcenter.baseUrl" value="http://${server.ctlcenter.host}:${server.ctlcenter.jetty.port}/ctlcenter"/>
	  </else>
	</if>
	<if>
	  <equals arg1="http://${server.workbench.host}:${server.workbench.jetty.port}" 
		  arg2="http://${server.hostname}:${server.jetty.port}"/>
	  <then>
	    <property name="workbench.baseUrl" value="/itnav"/>
	  </then>
	  <else>
	    <property name="workbench.baseUrl" value="http://${server.workbench.host}:${server.workbench.jetty.port}/itnav"/>
	  </else>
	</if>

        <property name="task.check-server-env.executed" value="true"/>
    </target>
</project>
