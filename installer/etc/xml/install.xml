<?xml version="1.0" encoding="UTF-8"?> 
<!--
$Id$
-->
<project name="controltier-installer" default="execute" basedir=".">
    <description>
    Build script to install ControlTier Server and Client. Used by the install.sh script.
    </description>
    <property name="package.ant.version" value="1.7.0p1"/>
    <tstamp />
    
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ant.home}/lib/ant-contrib-1.0b1.jar"/>
        </classpath>
    </taskdef>

    <property file="etc/installer.properties" classpath="." />

    <target name="-load-props">
        <if>
            <os family="windows"/>
            <then>
                <property name="ctier.root.default" value="C:/ctier"/>
            </then>
            <else>
                <property name="ctier.root.default" value="${user.home}/ctier"/>
            </else>
        </if>
        <property file="${ctier.installfile}"/>
        <echo>Using CTIER_ROOT: ${env.ctier_root}</echo>
        <pathconvert property="env.ctier_root.converted">
            <path path="${env.ctier_root}"/>
        </pathconvert>
        <property environment="USER_ENV"/>
    </target>

    <target name="-check-prereqs">
        <if>
            <or>
                <!--
                ant.java.version    the JVM version Ant detected; currently it can hold
                    the values "1.2", "1.3", "1.4" and "1.5".
                -->
                <equals arg1="1.2" arg2="${ant.java.version}"/>
                <equals arg1="1.3" arg2="${ant.java.version}"/>
                <equals arg1="1.4" arg2="${ant.java.version}"/>
            </or>
            <then>
                <fail>Unable to install: Java version 1.5+ required. (ant.java.version = "${ant.java.version}")</fail>
            </then>
            <else>
                <echo>Using compatible Java version: ${ant.java.version}</echo>
            </else>
        </if>
    </target>

<!--    <property name="dontexpand" value="true"/>-->

    <target name="execute" depends="-check-prereqs,-load-props,check-client-env,check-server-env,-install-client,-install-server,install-jobcenter,install-reportcenter,generate-rcfile,echo-rcfile-info" >
        <echo>
Once you have started Tomcat, visit this URL to access ControlTier
Workbench:

    http://${server.tomcat.hostname}:${server.tomcat.port}/itnav

Instructions for the Headlines demo can be found here:

    http://open.controltier.com/Docs/headlines_install.html

NOTE: ControlTier Client requires that SSH is configured to allow
key-based authentication from the local host.  Ensure that the
public key has been added to the authorized_keys file.
 </echo>

        <echo>Install Complete</echo>
    </target>
    <target name="generate-rcfile">
        <if>
            <os family="windows"/>
            <then>
                <if>
                    <isset property="installer.rcbatfilename"/>

                    <then>
                        <if>
                            <available file="${user.home}/${installer.rcbatfilename}"/>
                            <then>
                                <copy file="${user.home}/${installer.rcbatfilename}" tofile="${user.home}/${installer.rcbatfilename}.orig"/>
                            </then>
                        </if>
                        <echo file="${user.home}/${installer.rcbatfilename}" append="false">:: this file was generated by ControlTier installer.

set CTIER_ROOT=${env.ctier_root.converted}

set CTL_HOME=${env.ctl_home.converted}
set CTL_BASE=${env.ctl_base.converted}
</echo>
                        <if >
                            <isset property="task.check-server-env.executed"/>
                            <then>
                                <echo  file="${user.home}/${installer.rcbatfilename}" append="true">
:: Server settings
set JOBCENTER_HOME=${converted.server.jobcenter.base_path}
set CATALINA_HOME=${env.catalina_home.converted}
set CATALINA_BASE=${env.catalina_base.converted}

set JAVA_HOME=${USER_ENV.JAVA_HOME}
</echo>
                                <property name="rcfile.path" value="%JOBCENTER_HOME%\bin;%CTL_HOME%\bin;%CATALINA_HOME%\bin;%Path%"/>
                            </then>
                            <else>
                                <property name="rcfile.path" value="%CTL_HOME%\bin;%Path%"/>
                            </else>
                        </if>
                        <echo  file="${user.home}/${installer.rcbatfilename}" append="true">

set Path=${rcfile.path}
</echo>
                    </then>
                </if>
            </then>
            <else>
                <if>
                    <available file="${user.home}/${installer.rcfilename}"/>
                    <then>
                        <copy file="${user.home}/${installer.rcfilename}" tofile="${user.home}/${installer.rcfilename}.orig"/>
                    </then>
                </if>

                <echo file="${user.home}/${installer.rcfilename}" append="false"># this file was generated by ControlTier installer.
                    
export CTIER_ROOT=${env.ctier_root}

export CTL_HOME=${env.ctl_home}
export CTL_BASE=${env.ctl_base}
</echo>
                <if>
                    <isset property="task.check-server-env.executed"/>
                    <then>
                        <echo file="${user.home}/${installer.rcfilename}" append="true">
# Server settings
export JOBCENTER_HOME=${server.jobcenter.base_path}
export CATALINA_HOME=${env.catalina_home}
export CATALINA_BASE=${env.catalina_base}

export JAVA_HOME=${USER_ENV.JAVA_HOME}
</echo>
                        <property name="rcfile.path" value="$JOBCENTER_HOME/bin:$CTL_HOME/bin:$CATALINA_HOME/bin:$PATH"/>
                    </then>
                    <else>
                        <property name="rcfile.path" value="$CTL_HOME/bin:$PATH"/>
                    </else>
                </if>
                <echo file="${user.home}/${installer.rcfilename}" append="true">

export PATH=${rcfile.path}

if [ -n "$BASH" ] ; then
    . $CTL_HOME/etc/bash_completion.sh ;
    if [ -t 0 -a -z "$CTL_CLI_TERSE" ]
    then
      CTL_CLI_TERSE=true
      export CTL_CLI_TERSE
    fi
fi

                </echo>
            </else>
        </if>

    </target>


    <target name="-install-server" depends="check-server-env,-backup-server-config,expand-server,configure-server,install-sample-par" >
        <echo>ControlTier Server installed.</echo>
    </target>
    <target name="install-server" depends="-check-prereqs,-load-props,-install-server" >
    </target>
    
    <target name="-backup-server-config" description="backup config files that would get overwritten">
        <property name="itnav.configpath" value="webapps/itnav/WEB-INF/classes"/>
        <backup-file-with-datestamp file="${env.catalina_base}/${itnav.configpath}/bootstrap.properties"/>
        <backup-file-with-datestamp file="${env.catalina_base}/${itnav.configpath}/runtime.properties"/>
    </target>

    <target name="install-jobcenter">
        <!--
            expands the jobcenter package, and executes the build.xml install script with the appropriate properties
        -->
        <fail-if-blank name="env.ctl_home"/>
        <fail-if-blank name="env.ctl_base"/>

        <!--<mkdir dir="${pkgs.root}/jobcenter"/>-->
        <unzip dest="${pkgs.root}/" src="${pkgs.root}/${pkgs.jobcenter.archive}"/>
        <if>
            <available file="${pkgs.root}/jobcenter-${pkgs.jobcenter.version}/build.xml" type="file"/>
            <then>
                <ant dir="${pkgs.root}/jobcenter-${pkgs.jobcenter.version}">
                    <property name="ctl.base" value="${env.ctl_base}"/>
                    <property name="ctl.home" value="${env.ctl_home}"/>
                    <property name="install.ant.home" value="${env.ctl_home}/pkgs/apache-ant-${package.ant.version}"/>
                    <property name="jetty.home" value="${server.jobcenter.base_path}"/>
                    <property name="jetty.server.httpPort" value="${server.jetty.port}"/>
                    <property name="jetty.server.ajpPort" value="${server.jetty.ajpPort}"/>
                    <property name="jobcenter.base.path" value="${server.jobcenter.data_path}"/>
                    <property name="reportcenter.baseUrl" value="http://${server.reportcenter.host}:${server.reportcenter.jetty.port}/reportcenter"/>
                    <property name="reportcenter.host" value="${server.reportcenter.host}"/>
                    <property name="reportcenter.port" value="${server.reportcenter.port}"/>
                    <property name="grails.datasource.path" value="${server.jobcenter.data_path}/grailsdb"/>
                    <property name="quartz.datasource.path" value="${server.jobcenter.data_path}/quartzdb"/>
                    <property name="default.username" value="${tomcat.user.name}"/>
                    <property name="default.password" value="${tomcat.user.password}"/>
                </ant>
            </then>
        </if>
    </target>

    <target name="install-reportcenter">
        <!--
            expands the reportcenter package, and executes the build.xml install script with the appropriate properties
        -->
        <fail-if-blank name="server.reportcenter.home_path"/>
        <fail-if-blank name="server.reportcenter.base_path"/>
        <fail-if-blank name="server.reportcenter.host"/>
        <fail-if-blank name="server.reportcenter.jetty.port"/>
        <fail-if-blank name="server.reportcenter.jetty.ajpPort"/>
        <fail-if-blank name="server.reportcenter.port"/>

        <unzip dest="${pkgs.root}/" src="${pkgs.root}/${pkgs.reportcenter.archive}"/>
        <if>
            <available file="${pkgs.root}/reportcenter-${pkgs.reportcenter.version}/build.xml" type="file"/>
            <then>
                <ant dir="${pkgs.root}/reportcenter-${pkgs.reportcenter.version}">
                    <property name="jetty.home" value="${server.reportcenter.home_path}"/>
                    <property name="jetty.server.httpPort" value="${server.reportcenter.jetty.port}"/>
                    <property name="jetty.server.ajpPort" value="${server.reportcenter.jetty.ajpPort}"/>
                    <property name="reportcenter.base.path" value="${server.reportcenter.base_path}"/>
                    <property name="reportcenter.host" value="${server.reportcenter.host}"/>
                    <property name="reportcenter.port" value="${server.reportcenter.port}"/>
                    <property name="jobcenter.server.httpPort" value="${server.jetty.port}"/>
                    <property name="jobcenter.server.host" value="${server.tomcat.hostname}"/>
                    <property name="workbench.server.httpPort" value="${server.tomcat.port}"/>
                    <property name="workbench.server.host" value="${server.tomcat.hostname}"/>
                    <property name="default.username" value="${tomcat.user.name}"/>
                    <property name="default.password" value="${tomcat.user.password}"/>
                </ant>
            </then>
        </if>
    </target>
    <target name="-valid-tomcat" description="Expands tomcat zip if necessary">
        <if>
            <and>
                <isset property="pkgs.tomcat.archive"/>
                <not>
                    <equals arg1="" arg2="${pkgs.tomcat.archive}"/>
                </not>
                <available file="${pkgs.root}/${pkgs.tomcat.archive}" type="file"/>

                <isset property="pkgs.tomcat.version"/>
                <not>
                    <equals arg1="" arg2="${pkgs.tomcat.version}"/>
                </not>
            </and>
            <then>
                <unzip src="${pkgs.root}/${pkgs.tomcat.archive}" dest="${pkgs.root}" overwrite="true"/>
                <move file="${pkgs.root}/apache-tomcat-${pkgs.tomcat.version}" tofile="${env.catalina_home}"/>
                <copy file="${env.catalina_home}/bin/startup.sh" tofile="${env.catalina_home}/bin/startup.sh.orig"/>
                <copy file="${env.catalina_home}/bin/startup.bat" tofile="${env.catalina_home}/bin/startup.bat.orig"/>
                <copy file="${basedir}/etc/templates/tomcat-startup.sh.template" tofile="${env.catalina_home}/bin/startup.sh" overwrite="true"/>
                <copy file="${basedir}/etc/templates/tomcat-startup.bat.template" tofile="${env.catalina_home}/bin/startup.bat" overwrite="true"/>
                <chmod dir="${env.catalina_home}/bin" includes="*.sh" perm="ugo+rx"/>
            </then>
        </if>
    </target>

    <target name="expand-server" depends="-valid-tomcat">
        <!--
        expand itnav.war into $CATALINA_BASE/webapps/itnav
        -->
        <echo>Expanding itnav war file: ${pkgs.root}/${pkgs.itnav.archive} to ${env.catalina_home}/webapps/itnav</echo>
        <if>
            <not>
                <isset property="dontexpand"/>
            </not>
            <then>
                <unjar dest="${env.catalina_base}/webapps/itnav" src="${pkgs.root}/${pkgs.itnav.archive}"/>
            </then>
        </if>
    </target>

    <target name="-prepare-configure-server">
        <if>
            <and>
                <isset property="env.ctl_base"/>
                <not>
                    <equals arg1="" arg2="env.ctl_base"/>
                </not>
            </and>
            <then>
                <property name="ctl.integration.enabled" value="true"/>
            </then>
            <else>
                <property name="ctl.integration.enabled" value="false"/>
            </else>
        </if>
    </target>

    <target name="configure-server" depends="-prepare-configure-server">

        <!-- update server port -->
        <!-- duplicate original -->
        <copy tofile="${env.catalina_base}/conf/server.xml.orig" overwrite="true">
            <fileset file="${env.catalina_base}/conf/server.xml"/>
        </copy>

        <!-- overwrite file -->
        <copy tofile="${env.catalina_base}/conf/server.xml" overwrite="true" filtering="true">
            <filterset >
                <filter token="tomcat.server.port" value="${server.tomcat.port}"/>
            </filterset>
            <fileset file="${basedir}/etc/templates/server.xml.template"/>
        </copy>

        <!-- create the RDF data dir -->
        <mkdir dir="${server.rdfdata.path}"/>

        <!-- modify the bootstrap.properties to include the correct rdfdata path -->

        <property name="itnav.configpath" value="webapps/itnav/WEB-INF/classes"/>

        <!-- duplicate original -->
        <copy tofile="${env.catalina_base}/${itnav.configpath}/bootstrap.properties.orig" overwrite="true">
            <fileset file="${env.catalina_base}/${itnav.configpath}/bootstrap.properties"/>
        </copy>

        <!-- overwrite file -->
        <copy tofile="${env.catalina_base}/${itnav.configpath}/bootstrap.properties" overwrite="true">
            <filterchain >
                <!-- ngps.workbench.backend.type = fs    -->
                <replaceregex flags="si"
                    pattern="^ngps\.workbench\.backend\.type *=(.*)$"
                    replace="ngps.workbench.backend.type = fs"/>
                <!-- ngps.workbench.backend.fs.base = /usr/local/tomcat/rdfdata -->
                <replaceregex flags="si"
                    pattern="^ngps\.workbench\.backend\.fs\.base *=(.*)$"
                    replace="ngps.workbench.backend.fs.base = ${regex-escaped.server.rdfdata.path}" />
            </filterchain>
            <fileset file="${env.catalina_base}/${itnav.configpath}/bootstrap.properties.orig"/>
        </copy>


        <!-- modify the runtime.properties to include the correct settings -->

        <!-- duplicate original -->
        <copy tofile="${env.catalina_base}/${itnav.configpath}/runtime.properties.orig" overwrite="true">
            <fileset file="${env.catalina_base}/${itnav.configpath}/runtime.properties"/>
        </copy>

        <!-- overwrite file -->
        <copy tofile="${env.catalina_base}/${itnav.configpath}/runtime.properties" overwrite="true">
            <filterchain>
                <replaceregex flags="si"
                    pattern="^app\.external\.uri *=(.*)$"
                    replace="app.external.uri = http://${server.tomcat.hostname}:${server.tomcat.port}"/>
                <replaceregex flags="si"
                    pattern="^dav\.baseUrl *=(.*)$"
                    replace="dav.baseUrl = http://${server.tomcat.hostname}:${server.tomcat.port}/${server.tomcat.webdav.path}"/>
                <replaceregex flags="si"
                              pattern="^app\.jobcenter\.baseUrl *=(.*)$"
                              replace="app.jobcenter.baseUrl = http://${server.tomcat.hostname}:${server.jetty.port}/jobcenter"/>

                <replaceregex flags="si"
                    pattern="^order\.package\.defaults\.packageRepoURL\.template *=(.*?)/pkgs(.*)$"
                    replace="order.package.defaults.packageRepoURL.template=http://${server.tomcat.hostname}:${server.tomcat.port}/${server.tomcat.webdav.path}/pkgs\2"/>

                <replaceregex flags="si"
                    pattern="^dav\.user *=(.*)$"
                    replace="dav.user = ${tomcat.user.name}"
                    />
                <replaceregex flags="si"
                    pattern="^dav\.passwd *=(.*)$"
                    replace="dav.passwd = ${tomcat.user.password}"
                    />
                <replaceregex flags="si"
                    pattern="^dav\.baseDir *=(.*)$"
                    replace="dav.baseDir = ${regex-escaped.server.dav.path}"
                />
                <replaceregex flags="si"
                    pattern="^framework\.node *=(.*)$"
                    replace="framework.node = ${server.tomcat.hostname}"
                />
                <replaceregex flags="si"
                              pattern="^app\.log4j\.appender\.CommonLog\.port *=(.*)$"
                              replace="app.log4j.appender.CommonLog.port = ${server.reportcenter.port}"
                    />
                <replaceregex flags="si"
                              pattern="^ctl\.base *=(.*)$"
                              replace="ctl.base = ${env.ctl_base.forwardslash}"
                    />
                <replaceregex flags="si"
                              pattern="^ctl\.integration\.enabled *=(.*)$"
                              replace="ctl.integration.enabled = ${ctl.integration.enabled}"
                    />
                <replaceregex flags="si"
                              pattern="^app\.reportcenter\.baseUrl *=(.*)$"
                              replace="app.reportcenter.baseUrl = http://${server.reportcenter.host}:${server.reportcenter.jetty.port}/reportcenter"
                    />
                <replaceregex flags="si"
                              pattern="^app\.reportcenter\.host *=(.*)$"
                              replace="app.reportcenter.host = ${server.reportcenter.host}"
                    />
                <replaceregex flags="si"
                              pattern="^app\.reportcenter\.port *=(.*)$"
                              replace="app.reportcenter.port = ${server.reportcenter.port}"
                    />
            </filterchain>
            <fileset file="${env.catalina_base}/${itnav.configpath}/runtime.properties.orig"/>
        </copy>

        <!-- if the user wants a default tomcat-users.xml, backup the original and copy over our template -->


        <!-- expand tomcat-users into properties using xsl -->
        <xslt in="${env.catalina_base}/conf/tomcat-users.xml"
            out="temp/tomcat-users.properties"
            style="etc/xml/tomcat-users.xsl"
            force="true">
            <param name="user" expression="${tomcat.user.name}"/>
            <param name="password" expression="${tomcat.user.password}"/>
        </xslt>


        <!-- load properties and determine whether user is present and valid -->
        <property file="temp/tomcat-users.properties" prefix="tomcat-users-xml2"/>
        <if>
            <or>
                <not>
                    <isset property="tomcat-users-xml2.user.roles"/>
                </not>

                <and>
                    <isset property="tomcat-users-xml2.user.roles"/>
                    <not>
                        <and>
                            <contains string="${tomcat-users-xml2.user.roles}" substring="user"/>
                            <contains string="${tomcat-users-xml2.user.roles}" substring="admin"/>
                        </and>
                    </not>
                </and>
            </or>
            <then>
                <if>
                    <equals arg1="true" arg2="${users.install-default}"/>
                    <then>
                        <backup-file-with-datestamp file="${env.catalina_base}/conf/tomcat-users.xml"/>

                        <copy tofile="${env.catalina_base}/conf/tomcat-users.xml" overwrite="true">
                            <filterset>
                                <filter token="tomcat.user.name" value="${tomcat.user.name}"/>
                                <filter token="tomcat.user.password" value="${tomcat.user.password}"/>
                            </filterset>
                            <fileset file="${basedir}/etc/xml/tomcat-users.xml"/>
                        </copy>
                    </then>
                </if>
            </then>
        </if>




        <!--
        Replace the xerces jars in the tomcat endorsed libs directory with the acceptable versions.
        -->
        <if>
            <not>
                <equals arg1="true" arg2="${tomcat.replace-xerces-jars}"/>
            </not>
            <then>
                <echo>WARNING: Xerces jars from original Tomcat are not being replaced.  ControlTier Server will not
function until they are replaced.</echo>
            </then>
            <else>
                <copy tofile="${env.catalina_home}/common/endorsed/xercesImpl.jar" overwrite="true">
                    <fileset file="${env.catalina_base}/webapps/itnav/WEB-INF/lib/xerces-2.7.1.jar"/>
                </copy>
                <copy tofile="${env.catalina_home}/common/endorsed/xmlParserAPIs.jar" overwrite="true">
                    <fileset file="${env.catalina_base}/webapps/itnav/WEB-INF/lib/xml-apis-2.7.1.jar"/>
                </copy>
                <copy tofile="${env.catalina_home}/common/endorsed/xalan.jar" overwrite="true">
                    <fileset file="${env.catalina_base}/webapps/itnav/WEB-INF/lib/xalan-2.6.0.jar"/>
                </copy>
            </else>
        </if>


        <!-- expand tomcat-users into properties using xsl -->
        <xslt in="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/WEB-INF/web.xml"
            out="temp/webdav-web.properties"
            style="${basedir}/etc/xml/web.xsl"
            force="true">
            <xmlcatalog> 
               <dtd publicId="-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" 
                    location="${basedir}/etc/xml/web-app_2_3.dtd"/> 
            </xmlcatalog>
        </xslt>

        <!-- load properties and determine whether user is present and valid -->
        <property file="temp/webdav-web.properties" prefix="webdav-web"/>
<!--        <echoproperties prefix="webdav-web"/>-->
        <if>
            <or>
                <not>
                    <isset property="webdav-web.readonly"/>
                </not>
                <not>
                    <equals arg1="false" arg2="${webdav-web.readonly}"/>
                </not>
            </or>
            <then>
                <!-- backup old web.xml to web.xml.orig -->
                <copy file="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/WEB-INF/web.xml"
                      tofile="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/WEB-INF/web.xml.orig"
                      overwrite="true">
                </copy>

                <!-- filter original web.xml to include the correct init-param readonly=false -->
                <copy file="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/WEB-INF/web.xml.orig"
                      tofile="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/WEB-INF/web.xml"
                      overwrite="true">
                    <filterchain >
                        <replaceregex pattern="(&lt;/servlet&gt;)"
                                      replace="  &lt;init-param&gt;${line.separator}    &lt;param-name&gt;readonly&lt;/param-name&gt;${line.separator}    &lt;param-value&gt;false&lt;/param-value&gt;${line.separator}  &lt;/init-param&gt;${line.separator}${line.separator} \1"/>
                    </filterchain>
                </copy>

            </then>
        </if>
	<!--
	Replace the base-seed.jar
	-->
	<echo level="info">Copying base-seed.jar to webdav/seeds ...</echo>
	<mkdir dir="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/seeds"/>
	<copy
	      todir="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/seeds" 
	      verbose="true" flatten="true">
	  <zipentry
	      zipfile="${env.catalina_base}/webapps/itnav/WEB-INF/lib/ctier-common-${pkgs.itnav.version}.jar"
	      name="resources/seeds/base-seed.jar"
	      />
	</copy>
    </target>

    <target name="install-sample-par">
        <!-- copy the headlines par into webdav archive directory -->
        <if>
            <and>
                <isset property="pkgs.headlines.archive"/>
                <available file="${basedir}/${pkgs.root}/${pkgs.headlines.archive}"/>
            </and>
            <then>
                <copy tofile="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/archive/headlines/${pkgs.headlines.archive}" >
                    <fileset file="${basedir}/${pkgs.root}/${pkgs.headlines.archive}"/>
                </copy>
            </then>
        </if>
    </target>

    <target name="-install-client" depends="check-client-env,expand-client,configure-client" description="Internal client install target" >
        <echo>ControlTier Client installed.</echo>
    </target>

    <target name="install-client" depends="-check-prereqs,-load-props,-install-client,generate-rcfile,echo-rcfile-info" description="Installs the ControlTier client only">
        <echo>Install Complete</echo>
    </target>

    <target name="echo-rcfile-info" description="Prints information about location and content of .ctierrc file.">
        <echo>
A .ctierrc file was generated at:
    ${user.home}/${installer.rcfilename}
containing the appropriate environment variables for the installed
ControlTier Client To use it, add the following to your .profile
or equivalent:

    if [ -f ~/.ctierrc ]; then
    . ~/.ctierrc
    else
    echo ~/.ctierrc not found 1&gt;&amp;2
    fi
</echo>
    </target>

    <target name="expand-client">

        <if>
            <not>
                <available file="${env.ctl_home}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${env.ctl_home}"/>
            </then>
        </if>
        <!-- copy the expanded ctl to the CTL_HOME -->
        <if>
            <not>
                <isset property="dontexpand"/>
            </not>
            <then>
                <copy todir="${env.ctl_home}">
                    <fileset dir="${pkgs.root}/${pkgs.ctl.expanded}"/>
                </copy>
            </then>
        </if>
    </target>

    <macrodef name="backup-file-with-datestamp">
        <attribute name="file"/>
        <sequential >
            <if>
                <available file="@{file}"/>
                <then>
                    <copy tofile="@{file}.${DSTAMP}-${TSTAMP}.backup" overwrite="true">
                        <fileset file="@{file}"/>
                    </copy>
                </then>
            </if>
        </sequential>
    </macrodef>

    <target name="configure-client">
        <!--
        set executable flag on bin scripts
                -->
        <chmod dir="${env.ctl_home}/bin" perm="ugo+rx" includes="*"/>


        <if>
            <not>
                <available file="${env.ctl_base}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${env.ctl_base}"/>
            </then>
        </if>

        <pathconvert property="converted.env.ctl_home">
            <path path="${env.ctl_home}"/>
        </pathconvert>
        <pathconvert property="converted.env.ctl_base">
            <path path="${env.ctl_base}"/>
        </pathconvert>

	<!-- cleanup the download directory to remove any old module jars -->
	<delete dir="${converted.env.ctl_base}/var/tmp/downloads" quiet="true"/>
	<mkdir dir="${converted.env.ctl_base}/var/tmp/downloads"/>
	<!-- remove previously downloaded module jars under "ctl.base/var/projectName/" -->
	 <delete>
	   <fileset dir="${converted.env.ctl_base}/var"
		    includes="**/*-head.jar,**/*-0.jar,**/*-1*.jar,**/*-2*.jar,**/*-3*.jar, **/*-4*.jar, **/*-5*.jar, **/*-6*.jar, **/*-7*.jar, **/*-8*.jar, **/*-9*.jar, "/>
	 </delete>

        <!-- run "$CTL_HOME/bin/ctl-setup -n hostname" -->
        <if>
            <os family="unix"/>
            <then>
                <dirname property="anthome.dir" file="${ant.home}"/>
                <basename property="anthome.base" file="${ant.home}"/>

                <exec executable="${converted.env.ctl_home}/bin/ctl-setup" dir="${converted.env.ctl_base}" newenvironment="true" failonerror="true">
                    <env key="CTL_HOME" value="${converted.env.ctl_home}"/>
                    <env key="CTL_BASE" value="${converted.env.ctl_base}"/>
                    <env key="ANT_HOME" value="${anthome.dir}/${anthome.base}"/>
                    <env key="JAVA_HOME" value="${USER_ENV.JAVA_HOME}"/>
                    <arg line="-f -n ${client.hostname}"/>
                </exec>
                <exec executable="${converted.env.ctl_home}/bin/ext-setup" dir="${converted.env.ctl_base}" newenvironment="true" failonerror="true">
                    <env key="CTL_HOME" value="${converted.env.ctl_home}"/>
                    <env key="CTL_BASE" value="${converted.env.ctl_base}"/>
                    <env key="ANT_HOME" value="${anthome.dir}/${anthome.base}"/>
                    <env key="JAVA_HOME" value="${USER_ENV.JAVA_HOME}"/>
                    <arg line="-S -f ${basedir}/${pkgs.root}/${pkgs.commander.archive} -D workbench.server=${server.tomcat.hostname} -D workbench.port=${server.tomcat.port} --overwrite"/>
                </exec>
            </then>
            <elseif>
                <os family="windows"/>
                <then>

                    <exec executable="${converted.env.ctl_home}\bin\ctl-setup.bat" dir="${converted.env.ctl_base}" newenvironment="true" failonerror="true">
                        <env key="CTL_HOME" value="${converted.env.ctl_home}"/>
                        <env key="CTL_BASE" value="${converted.env.ctl_base}"/>
<!--                        <env key="ANT_HOME" value="${ant.home}"/>-->
                        <env key="JAVA_HOME" value="${USER_ENV.JAVA_HOME}"/>
                        <arg line="-f -n ${client.hostname}"/>
                    </exec>
                    <exec executable="${converted.env.ctl_home}\bin\ext-setup.bat" dir="${converted.env.ctl_base}" newenvironment="true" failonerror="true">
                        <env key="CTL_HOME" value="${converted.env.ctl_home}"/>
                        <env key="CTL_BASE" value="${converted.env.ctl_base}"/>
<!--                        <env key="ANT_HOME" value="${ant.home}"/>-->
                        <env key="JAVA_HOME" value="${USER_ENV.JAVA_HOME}"/>
                        <arg line='-S -f "${basedir}\${pkgs.root}\${pkgs.commander.archive}" -D workbench.server=${server.tomcat.hostname} -D workbench.port=${server.tomcat.port}'/>
                    </exec>
                </then>
            </elseif>
            <else>
                <fail>Sorry, the installer does not currently support your operating system.</fail>
            </else>
        </if>


        <property name="framework.dav.rootDir" value="${env.catalina_base}/webapps/${server.tomcat.webdav.path}"/>
        <pathconvert property="converted.framework.dav.rootDir">
            <path path="${framework.dav.rootDir}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.framework.dav.rootDir" dirsep="\\\\\\\\">
                    <!--
                    NOTE: we need eight \ chars "\\\\\\\\" here because:
                    It is unescaped once by ant (or pathconvert?) into \\\\, once by replaceregex into \\.
                    The output into properties file should be \\, since it is then unescaped by java props when read back in.
                    barf..
                -->
                    <path path="${framework.dav.rootDir}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.framework.dav.rootDir" value="${converted.framework.dav.rootDir}"/>
            </else>
        </if>
        <property name="framework.pkgRepo.rootdir" value="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/pkgs"/>
        <pathconvert property="converted.framework.pkgRepo.rootdir">
            <path path="${framework.pkgRepo.rootdir}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.framework.pkgRepo.rootdir" dirsep="\\\\\\\\">
                    <path path="${framework.pkgRepo.rootdir}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.framework.pkgRepo.rootdir" value="${converted.framework.pkgRepo.rootdir}"/>
            </else>
        </if>

        <!-- duplicate original -->
        <backup-file-with-datestamp file="${env.ctl_base}/etc/framework.properties"/>

        <!-- overwrite file -->
        <copy tofile="${env.ctl_base}/etc/framework.properties" overwrite="true">
            <filterchain>
                <replaceregex flags="si"
                   pattern="^ant\.home *=(.*)$"
                   replace="ant.home = ${env.ctl_home}/pkgs/apache-ant-${package.ant.version}"
                />
                <!--
framework.workbench.integration.enabled = true
framework.dav.rootDir =
framework.server.username = user2
framework.server.password = user2pass
framework.server.hostname = localhost
framework.server.url = http://localhost:8080/itnav

framework.webdav.uri = http://localhost:8080/webdav
framework.webdav.username = user2
framework.webdav.password = user2pass

framework.pkgRepo.uri = http://localhost:8080/webdav/pkgs
framework.pkgRepo.rootdir =
framework.pkgRepo.upload-url = http://localhost:8080/webdav/pkgs

 -->

                <replaceregex flags="si"
                    pattern="^framework\.workbench\.integration\.enabled *=(.*)$"
                    replace="framework.workbench.integration.enabled = true"
                />
                <replaceregex flags="si"
                    pattern="^framework\.dav\.rootDir *=(.*)$"
                    replace="framework.dav.rootDir = ${regex-escaped.framework.dav.rootDir}"
                />
                <replaceregex flags="si"
                    pattern="^framework\.server\.username *=(.*)$"
                    replace="framework.server.username = ${tomcat.user.name}"/>
                <replaceregex flags="si"
                    pattern="^framework\.server\.password *=(.*)$"
                    replace="framework.server.password = ${tomcat.user.password}"/>
                <replaceregex flags="si"
                    pattern="^framework\.server\.hostname *=(.*)$"
                    replace="framework.server.hostname = ${server.tomcat.hostname}"/>
                <replaceregex flags="si"
                    pattern="^framework\.server\.url *=(.*)$"
                    replace="framework.server.url = http://${server.tomcat.hostname}:${server.tomcat.port}/itnav"/>
                <replaceregex flags="si"
                    pattern="^framework\.webdav\.uri *=(.*)$"
                    replace="framework.webdav.uri = http://${server.tomcat.hostname}:${server.tomcat.port}/${server.tomcat.webdav.path}"/>
                <replaceregex flags="si"
                    pattern="^framework\.webdav\.username *=(.*)$"
                    replace="framework.webdav.username = ${tomcat.user.name}"/>
                <replaceregex flags="si"
                    pattern="^framework\.webdav\.password *=(.*)$"
                    replace="framework.webdav.password = ${tomcat.user.password}"/>
                <replaceregex flags="si"
                    pattern="^framework\.webdav\.rootdir *=(.*)$"
                    replace="framework.webdav.rootdir = ${regex-escaped.framework.dav.rootDir}"/>
                <replaceregex flags="si"
                    pattern="^framework\.pkgRepo\.uri *=(.*)$"
                    replace="framework.pkgRepo.uri = http://${server.tomcat.hostname}:${server.tomcat.port}/${server.tomcat.webdav.path}/pkgs"/>
                <replaceregex flags="si"
                    pattern="^framework\.pkgRepo\.rootdir *=(.*)$"
                    replace="framework.pkgRepo.rootdir = ${regex-escaped.framework.pkgRepo.rootdir}"/>
                <replaceregex flags="si"
                    pattern="^framework\.pkgRepo\.upload-url *=(.*)$"
                    replace="framework.pkgRepo.upload-url = http://${server.tomcat.hostname}:${server.tomcat.port}/${server.tomcat.webdav.path}/pkgs"/>

                <!-- email properties -->
                <!--
# recipient addresses to send email (comma separated)
framework.email.tolist = root

# email address appearing in message "from" field
framework.email.from = root

# email address replies should go
framework.email.replyto = do-not-reply

# The ctl email relay host. must be a functioning smtp relay server
framework.email.mailhost = mail
framework.email.mailport = 25

# User/pass info if the smtp server requires it
framework.email.user =
framework.email.password =
framework.email.ssl = true

# Fail if there is an error
framework.email.failonerror = true
                -->
                <replaceregex flags="si"
                              pattern="^framework\.email\.tolist *=(.*)$"
                              replace="framework.email.tolist = ${framework.email.tolist}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.from *=(.*)$"
                              replace="framework.email.from = ${framework.email.from}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.replyto *=(.*)$"
                              replace="framework.email.replyto = ${framework.email.replyto}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.mailhost *=(.*)$"
                              replace="framework.email.mailhost = ${framework.email.mailhost}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.mailport *=(.*)$"
                              replace="framework.email.mailport = ${framework.email.mailport}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.user *=(.*)$"
                              replace="framework.email.user = ${framework.email.user}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.password *=(.*)$"
                              replace="framework.email.password = ${framework.email.password}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.ssl *=(.*)$"
                              replace="framework.email.ssl = ${framework.email.ssl}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.failonerror *=(.*)$"
                              replace="framework.email.failonerror = ${framework.email.failonerror}"/>

                <!-- ssh path -->
                <replaceregex flags="si"
                              pattern="^framework\.ssh\.keypath *=(.*)$"
                              replace="framework.ssh.keypath = ${framework.ssh.keypath}"/>
                
                <!-- ssh user -->
                <replaceregex flags="si"
                              pattern="^framework\.ssh\.user *=(.*)$"
                              replace="framework.ssh.user = ${framework.ssh.user}"/>

            </filterchain>
            <fileset file="${env.ctl_base}/etc/framework.properties.${DSTAMP}-${TSTAMP}.backup"/>
        </copy>



        <if>
            <available file="${env.ctl_base}/etc/log4j.properties.orig"/>
            <then>
                <move
                    file="${env.ctl_base}/etc/log4j.properties.orig"
                    tofile="${env.ctl_base}/etc/log4j.properties.orig-${DSTAMP}.${TSTAMP}"/>
            </then>
        </if>
        <!-- duplicate original log4j.properties -->

        <backup-file-with-datestamp file="${env.ctl_base}/etc/log4j.properties"/>

        <!-- overwrite file -->
        <copy tofile="${env.ctl_base}/etc/log4j.properties" overwrite="true">
            <filterchain>
                <!--
log4j.logger.com.controltier.log.common=INFO,CommonLog
log4j.appender.CommonLog.remoteHost=${server.tomcat.hostname}
log4j.appender.CommonLog.port=${server.reportcenter.port}

 -->
                <replaceregex flags="si"
                              pattern="^# *log4j\.logger\.com\.controltier\.log\.common *=(.*)$"
                              replace="log4j.logger.com.controltier.log.common = INFO,CommonLog"/>
                <replaceregex flags="si"
                              pattern="^log4j\.appender\.CommonLog\.remoteHost *=(.*)$"
                              replace="log4j.appender.CommonLog.remoteHost = ${server.reportcenter.host}"/>
                <replaceregex flags="si"
                              pattern="^log4j\.appender\.CommonLog\.port *=(.*)$"
                              replace="log4j.appender.CommonLog.port = ${server.reportcenter.port}"/>

            </filterchain>
            <fileset file="${env.ctl_base}/etc/log4j.properties.${DSTAMP}-${TSTAMP}.backup"/>
        </copy>

    </target>


    <macrodef name="fail-if-blank">
        <attribute name="name" />
        <sequential >
            <fail unless="@{name}">@{name} is not defined in default.properties</fail>
            <condition property="@{name}.isblank">
                <equals arg1="" arg2="${@{name}}"/>
            </condition>
            <fail if="@{name}.isblank">@{name} is empty in default.properties</fail>
        </sequential>
    </macrodef>
    
    <macrodef name="fail-if-not-dir">
        <attribute name="name" />
        <attribute name="mesg" default=""/>
        <sequential >
            <condition property="@{name}.isnotdir">
                <not>
                    <available file="${@{name}}" type="dir"/>
                </not>
            </condition>
            <fail if="@{name}.isnotdir">@{name} is not a valid directory: '${@{name}}'@{mesg}</fail>
        </sequential>
    </macrodef>


    <target name="check-client-env">

        <!--
        target: check-client-env
        check environment properties set by input properties
        -->

        <!-- default property values -->
        <property name="server.reportcenter.port" value="1055"/>
        <property name="framework.email.tolist" value="root"/>
        <property name="framework.email.from" value="root"/>
        <property name="framework.email.replyto" value="do-not-reply"/>
        <property name="framework.email.mailhost" value="mail"/>
        <property name="framework.email.mailport" value="25"/>
        <property name="framework.email.ssl" value="true"/>
        <property name="framework.email.failonerror" value="true"/>
        <property name="framework.ssh.keypath" value="${user.home}/.ssh/id_dsa"/>
        <property name="framework.ssh.user" value="${user.name}"/>

        <!-- verify values to be non-empty -->
        <fail-if-blank name="env.ctl_home"/>
        <fail-if-blank name="env.ctl_base"/>
        <fail-if-blank name="client.hostname"/>
        <fail-if-blank name="server.tomcat.port"/>
        <fail-if-blank name="server.tomcat.hostname"/>
        <fail-if-blank name="server.tomcat.webdav.path"/>
        <fail-if-blank name="tomcat.user.name"/>
        <fail-if-blank name="tomcat.user.password"/>

        <fail-if-blank name="server.reportcenter.port"/>
        <fail-if-blank name="framework.ssh.user"/>
        <fail-if-blank name="framework.ssh.keypath"/>


        <pathconvert property="env.ctl_home.converted">
            <path path="${env.ctl_home}"/>
        </pathconvert>
        <pathconvert property="env.ctl_base.converted">
            <path path="${env.ctl_base}"/>
        </pathconvert>
        <pathconvert property="env.ctl_base.forwardslash" dirsep="/">
            <path path="${env.ctl_base}"/>
        </pathconvert>
    </target>

    <target name="check-server-env">

        <!--
        target: check-server-env
        check environment properties set by input properties
        -->

        <fail-if-blank name="env.catalina_base"/>
        <fail-if-blank name="env.catalina_home"/>
        <if>
            <not>
                <and>
                    <isset property="pkgs.tomcat.archive"/>
                    <not>
                        <equals arg1="" arg2="${pkgs.tomcat.archive}"/>
                    </not>
                    <available file="${pkgs.root}/${pkgs.tomcat.archive}" type="file"/>

                    <isset property="pkgs.tomcat.version"/>
                    <not>
                        <equals arg1="" arg2="${pkgs.tomcat.version}"/>
                    </not>
                </and>
            </not>
            <then>
                <fail-if-not-dir  name="env.catalina_home" mesg=", env.catalina_home should be a valid Tomcat installation"/>
                <fail-if-not-dir  name="env.catalina_base" mesg=", env.catalina_base should be a valid Tomcat base"/>
            </then>
            <else>
                <if>
                    <not>
                        <equals arg1="${env.catalina_home}" arg2="${env.catalina_base}"/>
                    </not>
                    <then>
                        <fail>env.catalina_home and env.catalina_base must be the same for automatic Tomcat installation.</fail>
                    </then>
                </if>
            </else>
        </if>

        <pathconvert property="env.catalina_home.converted">
            <path path="${env.catalina_home}"/>
        </pathconvert>

        <pathconvert property="env.catalina_base.converted">
            <path path="${env.catalina_base}"/>
        </pathconvert>

        <fail-if-blank name="server.tomcat.port"/>
        <fail-if-blank name="server.tomcat.hostname"/>
        <fail-if-blank name="server.tomcat.webdav.path"/>
        <fail-if-blank name="tomcat.user.name"/>
        <fail-if-blank name="tomcat.user.password"/>

        <!-- check tomcat-users.xml file if the users.install-default property is not "true" -->
        <if>
            <not>
                <equals arg1="true" arg2="${users.install-default}"/>
            </not>
            <then>
                <if>
                    <not>
                        <available file="${env.catalina_base}/conf/tomcat-users.xml"/>
                    </not>
                    <then>
                        <fail>The tomcat-users.xml file was not found: ${env.catalina_base}/conf/tomcat-users.xml
 To have a default tomcat-users.xml file used, please set the "users.install-default" property to "true" inside "default.properties".</fail>
                    </then>
                </if>

                <!-- expand tomcat-users into properties using xsl -->
                <xslt in="${env.catalina_base}/conf/tomcat-users.xml"
                    out="temp/tomcat-users.properties"
                    style="etc/xml/tomcat-users.xsl"
                    force="true">
                    <param name="user" expression="${tomcat.user.name}"/>
                    <param name="password" expression="${tomcat.user.password}"/>
                </xslt>

                <!-- load properties and determine whether user is present and valid -->
                <property file="temp/tomcat-users.properties" prefix="tomcat-users-xml"/>
                <fail unless="tomcat-users-xml.user.roles">The tomcat-users.xml file does not contain a user matching the username and password from the default.properties file: '${tomcat.user.name}'
                    Please modify default.properties, or modify your tomcat-users.xml file to match.</fail>
                <if>
                    <not>
                        <and>
                            <contains string="${tomcat-users-xml.user.roles}" substring="user"/>
                            <contains string="${tomcat-users-xml.user.roles}" substring="admin"/>
                        </and>
                    </not>
                    <then>
                        <fail>The user "${tomcat.user.name}" defined in ${env.catalina_base}/conf/tomcat-users.xml is not a member of the correct roles: "user,admin".  Please modify your tomcat-users.xml to fix this and then run the install script again.</fail>
                    </then>
                </if>
            </then>
        </if>

        <fail-if-blank name="server.dav.basedir"/>

        <pathconvert property="converted.server.dav.basedir">
            <path path="${server.dav.basedir}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.server.dav.path" dirsep="\\\\\\\\">
                    <path path="${server.dav.basedir}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.server.dav.path" value="${converted.server.dav.basedir}"/>
            </else>
        </if>

        <fail-if-blank name="server.rdfdata.path"/>
        <pathconvert property="converted.server.rdfdata.path">
            <path path="${server.rdfdata.path}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.server.rdfdata.path" dirsep="\\\\\\\\">
                    <path path="${server.rdfdata.path}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.server.rdfdata.path" value="${converted.server.rdfdata.path}"/>
            </else>
        </if>

        <fail-if-blank name="server.jobcenter.base_path"/>

        <pathconvert property="converted.server.jobcenter.base_path">
            <path path="${server.jobcenter.base_path}"/>
        </pathconvert>

        <fail-if-blank name="server.jobcenter.data_path"/>
        <fail-if-blank name="server.jetty.port"/>
        <fail-if-blank name="server.jetty.ajpPort"/>

        <property name="task.check-server-env.executed" value="true"/>
    </target>
</project>
