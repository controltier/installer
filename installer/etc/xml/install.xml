<?xml version="1.0" encoding="UTF-8"?> 
<!--
$Id$
-->
<project name="controltier-installer" default="execute" basedir=".">
    <description>
    Build script to install ControlTier Server and Client. Used by the install.sh script.
    </description>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${ant.home}/lib/ant-contrib-1.0b1.jar"/>
        </classpath>
    </taskdef>

    <property file="etc/installer.properties" classpath="." />

<!--    <property name="dontexpand" value="true"/>-->

    <target name="execute" depends="check-client-env,check-server-env,-install-client,install-server,generate-rcfile,echo-rcfile-info" >
        <echo>
Once you have started Tomcat, visit this URL to access ControlTier
Workbench:

    http://${server.tomcat.hostname}:${server.tomcat.port}/itnav

Instructions for the Headlines demo can be found here:

    http://open.controltier.com/Docs/headlines_install.html

NOTE: ControlTier Client requires that SSH is configured to allow
key-based authentication from the local host.  Ensure that the
public key has been added to the authorized_keys file.
 </echo>

        <if>
            <isset property="warning.webdav.readonly"/>
            <then>
                <echo>
WARNING: Your webdav application configuration at:
    ${env.catalina_base}/webapps/${server.tomcat.webdav.path}/WEB-INF/web.xml
is set to READ-ONLY access. You MUST change this for ControlTier
Server to function properly. Modify the web.xml file to have this
&lt;init-param&gt; section under the &lt;servlet&gt; section:

&lt;init-param&gt;
    &lt;param-name&gt;readonly&lt;/param-name&gt;
    &lt;param-value&gt;false&lt;/param-value&gt;
&lt;/init-param&gt;
                </echo>
            </then>
        </if>
        <echo>Install Complete</echo>
    </target>
    <target name="generate-rcfile">
        <property environment="USER_ENV"/>
        <if>
            <os family="windows"/>
            <then>
                <if>
                    <isset property="installer.rcbatfilename"/>

                    <then>
                        <if>
                            <available file="${user.home}/${installer.rcbatfilename}"/>
                            <then>
                                <copy file="${user.home}/${installer.rcbatfilename}" tofile="${user.home}/${installer.rcbatfilename}.orig"/>
                            </then>
                        </if>
                        <echo file="${user.home}/${installer.rcbatfilename}" append="false">:: this file was generated by ControlTier installer.
                        </echo>
                        <if >
                            <isset property="task.check-server-env.executed"/>
                            <then>
                                <echo  file="${user.home}/${installer.rcbatfilename}" append="true">
set CATALINA_HOME=${env.catalina_home}
set CATALINA_BASE=${env.catalina_base}
</echo>
                                <property name="rcfile.path" value="%ANTDEPO_HOME%\bin;%CATALINA_HOME%\bin;%Path%"/>
                            </then>
                            <else>
                                <property name="rcfile.path" value="%ANTDEPO_HOME%\bin;%Path%"/>
                            </else>
                        </if>
                        <echo  file="${user.home}/${installer.rcbatfilename}" append="true">
set ANTDEPO_HOME=${env.antdepo_home}
set ANTDEPO_BASE=${env.antdepo_base}
set JAVA_HOME=${USER_ENV.JAVA_HOME}
set Path=${rcfile.path}
                        </echo>
                    </then>
                </if>
            </then>
            <else>
                <if>
                    <available file="${user.home}/${installer.rcfilename}"/>
                    <then>
                        <copy file="${user.home}/${installer.rcfilename}" tofile="${user.home}/${installer.rcfilename}.orig"/>
                    </then>
                </if>

                <echo file="${user.home}/${installer.rcfilename}" append="false"># this file was generated by ControlTier installer.
                </echo>
                <if>
                    <isset property="task.check-server-env.executed"/>
                    <then>
                        <echo file="${user.home}/${installer.rcfilename}" append="true">

export CATALINA_HOME=${env.catalina_home}
export CATALINA_BASE=${env.catalina_base}
</echo>
                        <property name="rcfile.path" value="$ANTDEPO_HOME/bin:$CATALINA_HOME/bin:$PATH"/>
                    </then>
                    <else>
                        <property name="rcfile.path" value="$ANTDEPO_HOME/bin:$PATH"/>
                    </else>
                </if>
                <echo file="${user.home}/${installer.rcfilename}" append="true">

export ANTDEPO_HOME=${env.antdepo_home}
export ANTDEPO_BASE=${env.antdepo_base}
export JAVA_HOME=${USER_ENV.JAVA_HOME}
export PATH=${rcfile.path}

if [ -n "$BASH" ] ; then
    . $ANTDEPO_HOME/etc/bash_completion.sh ;
fi
                </echo>
            </else>
        </if>

    </target>


    <target name="install-server" depends="check-server-env,expand-server,configure-server,install-sample-par" >
        <echo>ControlTier Server installed.</echo>
    </target>

    <target name="expand-server">
        <!--
        expand itnav.war into $CATALINA_BASE/webapps/itnav
        -->
        <echo>Expanding itnav war file: ${pkgs.root}/${pkgs.itnav.archive} to ${env.catalina_home}/webapps/itnav</echo>
        <if>
            <not>
                <isset property="dontexpand"/>
            </not>
            <then>
                <unjar dest="${env.catalina_base}/webapps/itnav" src="${pkgs.root}/${pkgs.itnav.archive}"/>
            </then>
        </if>
    </target>

    <target name="configure-server">

        <!-- create the RDF data dir -->
        <mkdir dir="${server.rdfdata.path}"/>

        <!-- modify the bootstrap.properties to include the correct rdfdata path -->

        <property name="itnav.configpath" value="webapps/itnav/WEB-INF/classes"/>

        <!-- duplicate original -->
        <copy tofile="${env.catalina_base}/${itnav.configpath}/bootstrap.properties.orig">
            <fileset file="${env.catalina_base}/${itnav.configpath}/bootstrap.properties"/>
        </copy>

        <!-- overwrite file -->
        <copy tofile="${env.catalina_base}/${itnav.configpath}/bootstrap.properties">
            <filterchain >
                <!-- ngps.workbench.backend.type = fs    -->
                <replaceregex flags="si"
                    pattern="^ngps\.workbench\.backend\.type *=(.*)$"
                    replace="ngps.workbench.backend.type = fs"/>
                <!-- ngps.workbench.backend.fs.base = /usr/local/tomcat/rdfdata -->
                <replaceregex flags="si"
                    pattern="^ngps\.workbench\.backend\.fs\.base *=(.*)$"
                    replace="ngps.workbench.backend.fs.base = ${regex-escaped.server.rdfdata.path}" />
            </filterchain>
            <fileset file="${env.catalina_base}/${itnav.configpath}/bootstrap.properties.orig"/>
        </copy>


        <!-- modify the runtime.properties to include the correct settings -->

        <!-- duplicate original -->
        <copy tofile="${env.catalina_base}/${itnav.configpath}/runtime.properties.orig">
            <fileset file="${env.catalina_base}/${itnav.configpath}/runtime.properties"/>
        </copy>

        <!-- overwrite file -->
        <copy tofile="${env.catalina_base}/${itnav.configpath}/runtime.properties">
            <filterchain>
                <replaceregex flags="si"
                    pattern="^app\.external\.uri *=(.*)$"
                    replace="app.external.uri = http://${server.tomcat.hostname}:${server.tomcat.port}"/>
                <replaceregex flags="si"
                    pattern="^dav\.baseUrl *=(.*)$"
                    replace="dav.baseUrl = http://${server.tomcat.hostname}:${server.tomcat.port}/${server.tomcat.webdav.path}"/>
                <replaceregex flags="si"
                    pattern="^order\.package\.defaults\.packageRepoURL\.template *=(.*?)/pkgs(.*)$"
                    replace="order.package.defaults.packageRepoURL.template=http://${server.tomcat.hostname}:${server.tomcat.port}/${server.tomcat.webdav.path}/pkgs\2"/>

                <replaceregex flags="si"
                    pattern="^dav\.user *=(.*)$"
                    replace="dav.user = ${tomcat.user.name}"
                    />
                <replaceregex flags="si"
                    pattern="^dav\.passwd *=(.*)$"
                    replace="dav.passwd = ${tomcat.user.password}"
                    />
                <replaceregex flags="si"
                    pattern="^(# )?app\.common\.log\.indexpath *=(.*)$"
                    replace="app.common.log.indexpath = ${regex-escaped.server.reports.path}"
                />
                <replaceregex flags="si"
                    pattern="^framework\.node *=(.*)$"
                    replace="framework.node = ${server.tomcat.hostname}"
                />
                <replaceregex flags="si"
                              pattern="^app\.log4j\.appender\.CommonLog\.port *=(.*)$"
                              replace="app.log4j.appender.CommonLog.port = ${server.reports.port}"
                    />
            </filterchain>
            <fileset file="${env.catalina_base}/${itnav.configpath}/runtime.properties.orig"/>
        </copy>

        <!-- if the user wants a default tomcat-users.xml, backup the original and copy over our template -->


        <!-- expand tomcat-users into properties using xsl -->
        <xslt in="${env.catalina_base}/conf/tomcat-users.xml"
            out="temp/tomcat-users.properties"
            style="etc/xml/tomcat-users.xsl"
            force="true">
            <param name="user" expression="${tomcat.user.name}"/>
            <param name="password" expression="${tomcat.user.password}"/>
        </xslt>


        <!-- load properties and determine whether user is present and valid -->
        <property file="temp/tomcat-users.properties" prefix="tomcat-users-xml2"/>
        <if>
            <or>
                <not>
                    <isset property="tomcat-users-xml2.user.roles"/>
                </not>

                <and>
                    <isset property="tomcat-users-xml2.user.roles"/>
                    <not>
                        <and>
                            <contains string="${tomcat-users-xml2.user.roles}" substring="user"/>
                            <contains string="${tomcat-users-xml2.user.roles}" substring="admin"/>
                        </and>
                    </not>
                </and>
            </or>
            <then>
                <if>
                    <equals arg1="true" arg2="${users.install-default}"/>
                    <then>
                        <if>
                            <available file="${env.catalina_base}/conf/tomcat-users.xml.backup"/>
                            <then>
                                <fail>Backup already exists, not overwriting: "${env.catalina_base}/conf/tomcat-users.xml.backup".  Please move this out of the way to continue.</fail>
                            </then>
                            <else>
                                <copy tofile="${env.catalina_base}/conf/tomcat-users.xml.backup">
                                    <fileset file="${env.catalina_base}/conf/tomcat-users.xml"/>
                                </copy>

                                <copy tofile="${env.catalina_base}/conf/tomcat-users.xml" overwrite="true">
                                    <filterset>
                                        <filter token="tomcat.user.name" value="${tomcat.user.name}"/>
                                        <filter token="tomcat.user.password" value="${tomcat.user.password}"/>
                                    </filterset>
                                    <fileset file="${basedir}/etc/xml/tomcat-users.xml"/>
                                </copy>
                            </else>
                        </if>
                    </then>
                </if>
            </then>
        </if>




        <!--
        Replace the xerces jars in the tomcat endorsed libs directory with the acceptable versions.
        -->
        <if>
            <not>
                <equals arg1="true" arg2="${tomcat.replace-xerces-jars}"/>
            </not>
            <then>
                <echo>WARNING: Xerces jars from original Tomcat are not being replaced.  ControlTier Server will not
function until they are replaced.</echo>
            </then>
            <else>
                <copy tofile="${env.catalina_home}/common/endorsed/xercesImpl.jar" overwrite="true">
                    <fileset file="${env.catalina_base}/webapps/itnav/WEB-INF/lib/xerces-2.7.1.jar"/>
                </copy>
                <copy tofile="${env.catalina_home}/common/endorsed/xmlParserAPIs.jar" overwrite="true">
                    <fileset file="${env.catalina_base}/webapps/itnav/WEB-INF/lib/xml-apis-2.7.1.jar"/>
                </copy>
                <copy tofile="${env.catalina_home}/common/endorsed/xalan.jar" overwrite="true">
                    <fileset file="${env.catalina_base}/webapps/itnav/WEB-INF/lib/xalan-2.6.0.jar"/>
                </copy>
            </else>
        </if>


        <!--
        TODO: check read-only=false in webdav web.xml
        -->

        <!-- expand tomcat-users into properties using xsl -->
        <xslt in="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/WEB-INF/web.xml"
            out="temp/webdav-web.properties"
            style="${basedir}/etc/xml/web.xsl"
            force="true">
            <xmlcatalog> 
               <dtd publicId="-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" 
                    location="${basedir}/etc/xml/web-app_2_3.dtd"/> 
            </xmlcatalog>
        </xslt>

        <!-- load properties and determine whether user is present and valid -->
        <property file="temp/webdav-web.properties" prefix="webdav-web"/>
<!--        <echoproperties prefix="webdav-web"/>-->
        <if>
            <or>
                <not>
                    <isset property="webdav-web.readonly"/>
                </not>
                <not>
                    <equals arg1="false" arg2="${webdav-web.readonly}"/>
                </not>
            </or>
            <then>
                <property name="warning.webdav.readonly" value="true"/>
            </then>
        </if>
    </target>

    <target name="install-sample-par">
        <!-- copy the headlines par into webdav archive directory -->
        <copy tofile="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/archive/headlines/${pkgs.headlines.archive}" >
            <fileset file="${basedir}/${pkgs.root}/${pkgs.headlines.archive}"/>
        </copy>
    </target>

    <target name="-install-client" depends="check-client-env,expand-client,configure-client" description="Internal client install target" >
        <echo>ControlTier Client installed.</echo>
    </target>

    <target name="install-client" depends="-install-client,generate-rcfile,echo-rcfile-info" description="Installs the ControlTier client only">
        <echo>Install Complete</echo>
    </target>

    <target name="echo-rcfile-info" description="Prints information about location and content of .ctierrc file.">
        <echo>
A .ctierrc file was generated at:
    ${user.home}/${installer.rcfilename}
containing the appropriate environment variables for the installed
ControlTier Client To use it, add the following to your .profile
or equivalent:

    if [ -f ~/.ctierrc ]; then
    . ~/.ctierrc
    else
    echo ~/.ctierrc not found 1&gt;&amp;2
    fi
</echo>
    </target>

    <target name="expand-client">

        <if>
            <not>
                <available file="${env.antdepo_home}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${env.antdepo_home}"/>
            </then>
        </if>
        <!-- copy the expanded antdepo to the ANTDEPO_HOME -->
        <if>
            <not>
                <isset property="dontexpand"/>
            </not>
            <then>
                <copy todir="${env.antdepo_home}">
                    <fileset dir="${pkgs.root}/${pkgs.antdepo.expanded}"/>
                </copy>
            </then>
        </if>
    </target>

    <target name="configure-client">
        <!--
        set executable flag on bin scripts
                -->
        <chmod dir="${env.antdepo_home}/bin" perm="ugo+rx" includes="*"/>


        <if>
            <not>
                <available file="${env.antdepo_base}" type="dir"/>
            </not>
            <then>
                <mkdir dir="${env.antdepo_base}"/>
            </then>
        </if>

        <pathconvert property="converted.env.antdepo_home">
            <path path="${env.antdepo_home}"/>
        </pathconvert>
        <pathconvert property="converted.env.antdepo_base">
            <path path="${env.antdepo_base}"/>
        </pathconvert>

        <!-- run "$ANTDEPO_HOME/bin/ad-setup -n hostname" -->
        <if>
            <os family="unix"/>
            <then>
                <dirname property="anthome.dir" file="${ant.home}"/>
                <basename property="anthome.base" file="${ant.home}"/>

                <exec executable="${converted.env.antdepo_home}/bin/ad-setup" dir="${converted.env.antdepo_base}" newenvironment="true" failonerror="true">
                    <env key="ANTDEPO_HOME" value="${converted.env.antdepo_home}"/>
                    <env key="ANTDEPO_BASE" value="${converted.env.antdepo_base}"/>
                    <env key="ANT_HOME" value="${anthome.dir}/${anthome.base}"/>
                    <env key="JAVA_HOME" value="${java.home}"/>
                    <arg line="-n ${client.hostname}"/>
                </exec>
                <exec executable="${converted.env.antdepo_home}/bin/ext-setup" dir="${converted.env.antdepo_base}" newenvironment="true" failonerror="true">
                    <env key="ANTDEPO_HOME" value="${converted.env.antdepo_home}"/>
                    <env key="ANTDEPO_BASE" value="${converted.env.antdepo_base}"/>
                    <env key="ANT_HOME" value="${anthome.dir}/${anthome.base}"/>
                    <env key="JAVA_HOME" value="${java.home}"/>
                    <arg line="-f ${basedir}/${pkgs.root}/${pkgs.commander.archive} -D workbench.server=${server.tomcat.hostname} -D workbench.port=${server.tomcat.port}"/>
                </exec>
            </then>
            <elseif>
                <os family="windows"/>
                <then>

                    <exec executable="${converted.env.antdepo_home}\bin\ad-setup.bat" dir="${converted.env.antdepo_base}" newenvironment="true" failonerror="true">
                        <env key="ANTDEPO_HOME" value="${converted.env.antdepo_home}"/>
                        <env key="ANTDEPO_BASE" value="${converted.env.antdepo_base}"/>
<!--                        <env key="ANT_HOME" value="${ant.home}"/>-->
                        <env key="JAVA_HOME" value="${java.home}"/>
                        <arg line="-n ${client.hostname}"/>
                    </exec>
                    <exec executable="${converted.env.antdepo_home}\bin\ext-setup.bat" dir="${converted.env.antdepo_base}" newenvironment="true" failonerror="true">
                        <env key="ANTDEPO_HOME" value="${converted.env.antdepo_home}"/>
                        <env key="ANTDEPO_BASE" value="${converted.env.antdepo_base}"/>
<!--                        <env key="ANT_HOME" value="${ant.home}"/>-->
                        <env key="JAVA_HOME" value="${java.home}"/>
                        <arg line='-f "${basedir}\${pkgs.root}\${pkgs.commander.archive}" -D workbench.server=${server.tomcat.hostname} -D workbench.port=${server.tomcat.port}'/>
                    </exec>
                </then>
            </elseif>
            <else>
                <fail>Sorry, the installer does not currently support your operating system.</fail>
            </else>
        </if>


        <property name="framework.dav.rootDir" value="${env.catalina_base}/webapps/${server.tomcat.webdav.path}"/>
        <pathconvert property="converted.framework.dav.rootDir">
            <path path="${framework.dav.rootDir}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.framework.dav.rootDir" dirsep="\\\\\\\\">
                    <!--
                    NOTE: we need eight \ chars "\\\\\\\\" here because:
                    It is unescaped once by ant (or pathconvert?) into \\\\, once by replaceregex into \\.
                    The output into properties file should be \\, since it is then unescaped by java props when read back in.
                    barf..
                -->
                    <path path="${framework.dav.rootDir}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.framework.dav.rootDir" value="${converted.framework.dav.rootDir}"/>
            </else>
        </if>
        <property name="framework.pkgRepo.rootdir" value="${env.catalina_base}/webapps/${server.tomcat.webdav.path}/pkgs"/>
        <pathconvert property="converted.framework.pkgRepo.rootdir">
            <path path="${framework.pkgRepo.rootdir}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.framework.pkgRepo.rootdir" dirsep="\\\\\\\\">
                    <path path="${framework.pkgRepo.rootdir}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.framework.pkgRepo.rootdir" value="${converted.framework.pkgRepo.rootdir}"/>
            </else>
        </if>

        <!-- duplicate original -->
        <copy tofile="${env.antdepo_base}/etc/framework.properties.orig">
            <fileset file="${env.antdepo_base}/etc/framework.properties"/>
        </copy>

        <!-- overwrite file -->
        <copy tofile="${env.antdepo_base}/etc/framework.properties">
            <filterchain>
                <!--
framework.dav.rootDir =
framework.server.username = user2
framework.server.password = user2pass
framework.server.hostname = localhost
framework.server.url = http://localhost:8080/itnav

framework.webdav.uri = http://localhost:8080/webdav
framework.webdav.username = user2
framework.webdav.password = user2pass

framework.pkgRepo.uri = http://localhost:8080/webdav/pkgs
framework.pkgRepo.rootdir =

 -->

                <replaceregex flags="si"
                    pattern="^framework\.dav\.rootDir *=(.*)$"
                    replace="framework.dav.rootDir = ${regex-escaped.framework.dav.rootDir}"
                />
                <replaceregex flags="si"
                    pattern="^framework\.server\.username *=(.*)$"
                    replace="framework.server.username = ${tomcat.user.name}"/>
                <replaceregex flags="si"
                    pattern="^framework\.server\.password *=(.*)$"
                    replace="framework.server.password = ${tomcat.user.password}"/>
                <replaceregex flags="si"
                    pattern="^framework\.server\.hostname *=(.*)$"
                    replace="framework.server.hostname = ${server.tomcat.hostname}"/>
                <replaceregex flags="si"
                    pattern="^framework\.server\.url *=(.*)$"
                    replace="framework.server.url = http://${server.tomcat.hostname}:${server.tomcat.port}/itnav"/>
                <replaceregex flags="si"
                    pattern="^framework\.webdav\.uri *=(.*)$"
                    replace="framework.webdav.uri = http://${server.tomcat.hostname}:${server.tomcat.port}/${server.tomcat.webdav.path}"/>
                <replaceregex flags="si"
                    pattern="^framework\.webdav\.username *=(.*)$"
                    replace="framework.webdav.username = ${tomcat.user.name}"/>
                <replaceregex flags="si"
                    pattern="^framework\.webdav\.password *=(.*)$"
                    replace="framework.webdav.password = ${tomcat.user.password}"/>
                <replaceregex flags="si"
                    pattern="^framework\.pkgRepo\.uri *=(.*)$"
                    replace="framework.pkgRepo.uri = http://${server.tomcat.hostname}:${server.tomcat.port}/${server.tomcat.webdav.path}/pkgs"/>
                <replaceregex flags="si"
                    pattern="^framework\.pkgRepo\.rootdir *=(.*)$"
                    replace="framework.pkgRepo.rootdir = ${regex-escaped.framework.pkgRepo.rootdir}"/>

                <!-- email properties -->
                <!--
# recipient addresses to send email (comma separated)
framework.email.tolist = root

# email address appearing in message "from" field
framework.email.from = root

# email address replies should go
framework.email.replyto = do-not-reply

# The antdepo email relay host. must be a functioning smtp relay server
framework.email.mailhost = mail
framework.email.mailport = 25

# User/pass info if the smtp server requires it
framework.email.user =
framework.email.password =
framework.email.ssl = true

# Fail if there is an error
framework.email.failonerror = true
                -->
                <replaceregex flags="si"
                              pattern="^framework\.email\.tolist *=(.*)$"
                              replace="framework.email.tolist = ${framework.email.tolist}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.from *=(.*)$"
                              replace="framework.email.from = ${framework.email.from}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.replyto *=(.*)$"
                              replace="framework.email.replyto = ${framework.email.replyto}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.mailhost *=(.*)$"
                              replace="framework.email.mailhost = ${framework.email.mailhost}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.mailport *=(.*)$"
                              replace="framework.email.mailport = ${framework.email.mailport}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.user *=(.*)$"
                              replace="framework.email.user = ${framework.email.user}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.password *=(.*)$"
                              replace="framework.email.password = ${framework.email.password}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.ssl *=(.*)$"
                              replace="framework.email.ssl = ${framework.email.ssl}"/>
                <replaceregex flags="si"
                              pattern="^framework\.email\.failonerror *=(.*)$"
                              replace="framework.email.failonerror = ${framework.email.failonerror}"/>


            </filterchain>
            <fileset file="${env.antdepo_base}/etc/framework.properties.orig"/>
        </copy>



        <!-- duplicate original log4j.properties -->
        <copy tofile="${env.antdepo_base}/etc/log4j.properties.orig">
            <fileset file="${env.antdepo_base}/etc/log4j.properties"/>
        </copy>

        <!-- overwrite file -->
        <copy tofile="${env.antdepo_base}/etc/log4j.properties">
            <filterchain>
                <!--

log4j.appender.CommonLog.remoteHost=${server.tomcat.hostname}
log4j.appender.CommonLog.port=${server.reports.port}

 -->
                <replaceregex flags="si"
                              pattern="^log4j\.appender\.CommonLog\.remoteHost *=(.*)$"
                              replace="log4j.appender.CommonLog.remoteHost = ${server.tomcat.hostname}"/>
                <replaceregex flags="si"
                              pattern="^log4j\.appender\.CommonLog\.port *=(.*)$"
                              replace="log4j.appender.CommonLog.port = ${server.reports.port}"/>

            </filterchain>
            <fileset file="${env.antdepo_base}/etc/log4j.properties.orig"/>
        </copy>

    </target>

    <target name="check-client-env">

        <!--
        target: check-client-env
        check environment properties set by input properties
        -->
        <fail unless="env.antdepo_base">env.antdepo_base is not defined in default.properties</fail>
        <fail unless="env.antdepo_home">env.antdepo_home is not defined in default.properties</fail>
        <fail unless="client.hostname">client.hostname is not defined in default.properties</fail>
        <fail unless="server.tomcat.port">server.tomcat.port is not defined in default.properties</fail>
        <fail unless="server.tomcat.hostname">server.tomcat.hostname is not defined in default.properties</fail>
        <fail unless="server.tomcat.webdav.path">server.tomcat.webdav.path is not defined in default.properties</fail>
        <fail unless="tomcat.user.name">tomcat.user.name is not defined in default.properties</fail>
        <fail unless="tomcat.user.password">tomcat.user.password is not defined in default.properties</fail>

        <!-- default property values -->
        <property name="server.reports.port" value="1055"/>
        <property name="framework.email.tolist" value="root"/>
        <property name="framework.email.from" value="root"/>
        <property name="framework.email.replyto" value="do-not-reply"/>
        <property name="framework.email.mailhost" value="mail"/>
        <property name="framework.email.mailport" value="25"/>
        <property name="framework.email.ssl" value="true"/>
        <property name="framework.email.failonerror" value="true"/>

        <!-- verify values to be non-empty -->
        <if>
            <equals arg1="" arg2="${env.antdepo_home}"/>
            <then>
                <fail>antdepo.home is empty: '${env.antdepo_home}'</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${env.antdepo_base}"/>
            <then>
                <fail>antdepo.base is empty: '${env.antdepo_base}'</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${client.hostname}"/>
            <then>
                <fail>client.hostname is empty: '${client.hostname}'</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${server.tomcat.port}"/>
            <then>
                <fail>server.tomcat.port is empty: '${server.tomcat.port}'</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${server.tomcat.hostname}"/>
            <then>
                <fail>server.tomcat.hostname is empty: '${server.tomcat.hostname}'</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${server.tomcat.webdav.path}"/>
            <then>
                <fail>server.tomcat.webdav.path is empty: '${server.tomcat.webdav.path}'</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${tomcat.user.name}"/>
            <then>
                <fail>tomcat.user.name is empty: '${tomcat.user.name}'</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${tomcat.user.password}"/>
            <then>
                <fail>tomcat.user.password is empty: '${tomcat.user.password}'</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${server.reports.port}"/>
            <then>
                <fail>server.reports.port is empty: '${server.reports.port}'</fail>
            </then>
        </if>

    </target>

    <target name="check-server-env">

        <!--
        target: check-server-env
        check environment properties set by input properties
        -->
        <fail unless="env.catalina_base">env.catalina_base is not defined in default.properties</fail>
        <fail unless="env.catalina_home">env.catalina_home is not defined in default.properties</fail>
        <fail unless="server.tomcat.port">server.tomcat.port is not defined in default.properties</fail>
        <fail unless="server.tomcat.hostname">server.tomcat.hostname is not defined in default.properties</fail>
        <fail unless="server.tomcat.webdav.path">server.tomcat.webdav.path is not defined in default.properties</fail>
        <fail unless="tomcat.user.name">tomcat.user.name is not defined in default.properties</fail>
        <fail unless="tomcat.user.password">tomcat.user.password is not defined in default.properties</fail>
        <fail unless="server.reports.path">server.reports.path is not defined in default.properties</fail>
        <fail unless="server.rdfdata.path">server.rdfdata.path is not defined in default.properties</fail>
        <if>
            <and>
                <not>
                    <available file="${env.catalina_home}" type="dir"/>
                </not>
                <or>
                    <equals arg1="" arg2="${env.catalina_home}"/>
                </or>
            </and>
            <then>
                <fail>catalina.home is empty or not present: '${env.catalina_home}'</fail>
            </then>
        </if>
        <pathconvert property="converted.env.catalina_home">
            <path path="${env.catalina_home}"/>
        </pathconvert>

        <if>
            <and>
                <not>
                    <available file="${env.catalina_base}" type="dir"/>
                </not>
                <or>
                    <equals arg1="" arg2="${env.catalina_base}"/>
                </or>
            </and>
            <then>
                <fail>catalina.base is empty or not present: '${env.catalina_home}'</fail>
            </then>
        </if>
        <pathconvert property="converted.env.catalina_base">
            <path path="${env.catalina_base}"/>
        </pathconvert>

        <if>
            <equals arg1="" arg2="${server.tomcat.port}"/>
            <then>
                <fail>server.tomcat.port is empty</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${server.tomcat.hostname}"/>
            <then>
                <fail>server.tomcat.hostname is empty</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${server.tomcat.webdav.path}"/>
            <then>
                <fail>server.tomcat.webdav.path is empty</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${tomcat.user.name}"/>
            <then>
                <fail>tomcat.user.name is empty</fail>
            </then>
        </if>

        <if>
            <equals arg1="" arg2="${tomcat.user.password}"/>
            <then>
                <fail>tomcat.user.password is empty</fail>
            </then>
        </if>

        <!-- check tomcat-users.xml file if the users.install-default property is not "true" -->
        <if>
            <not>
                <equals arg1="true" arg2="${users.install-default}"/>
            </not>
            <then>
                <if>
                    <not>
                        <available file="${env.catalina_base}/conf/tomcat-users.xml"/>
                    </not>
                    <then>
                        <fail>The tomcat-users.xml file was not found: ${env.catalina_base}/conf/tomcat-users.xml
 To have a default tomcat-users.xml file used, please set the "users.install-default" property to "true" inside "default.properties".</fail>
                    </then>
                </if>

                <!-- expand tomcat-users into properties using xsl -->
                <xslt in="${env.catalina_base}/conf/tomcat-users.xml"
                    out="temp/tomcat-users.properties"
                    style="etc/xml/tomcat-users.xsl"
                    force="true">
                    <param name="user" expression="${tomcat.user.name}"/>
                    <param name="password" expression="${tomcat.user.password}"/>
                </xslt>

                <!-- load properties and determine whether user is present and valid -->
                <property file="temp/tomcat-users.properties" prefix="tomcat-users-xml"/>
                <fail unless="tomcat-users-xml.user.roles">The tomcat-users.xml file does not contain a user matching the username and password from the default.properties file: '${tomcat.user.name}'
                    Please modify default.properties, or modify your tomcat-users.xml file to match.</fail>
                <if>
                    <not>
                        <and>
                            <contains string="${tomcat-users-xml.user.roles}" substring="user"/>
                            <contains string="${tomcat-users-xml.user.roles}" substring="admin"/>
                        </and>
                    </not>
                    <then>
                        <fail>The user "${tomcat.user.name}" defined in ${env.catalina_base}/conf/tomcat-users.xml is not a member of the correct roles: "user,admin".  Please modify your tomcat-users.xml to fix this and then run the install script again.</fail>
                    </then>
                </if>
            </then>
        </if>
        <if>
            <equals arg1="" arg2="${server.reports.path}"/>
            <then>
                <fail>server.reports.path is empty in default.properties</fail>
            </then>
        </if>
        <pathconvert property="converted.server.reports.path">
            <path path="${server.reports.path}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.server.reports.path" dirsep="\\\\\\\\">
                    <path path="${server.reports.path}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.server.reports.path" value="${converted.server.reports.path}"/>
            </else>
        </if>

        <if>
            <equals arg1="" arg2="${server.rdfdata.path}"/>
            <then>
                <fail>server.rdfdata.path is empty in default.properties</fail>
            </then>
        </if>
        <pathconvert property="converted.server.rdfdata.path">
            <path path="${server.rdfdata.path}"/>
        </pathconvert>
        <if>
            <os family="windows"/>
            <then>
                <pathconvert property="regex-escaped.server.rdfdata.path" dirsep="\\\\\\\\">
                    <path path="${server.rdfdata.path}"/>
                </pathconvert>
            </then>
            <else>
                <property name="regex-escaped.server.rdfdata.path" value="${converted.server.rdfdata.path}"/>
            </else>
        </if>

        <property name="task.check-server-env.executed" value="true"/>
    </target>
</project>
